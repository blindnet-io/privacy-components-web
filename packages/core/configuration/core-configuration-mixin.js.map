{"version":3,"file":"core-configuration-mixin.js","sources":["../../src/configuration/core-configuration-mixin.ts"],"sourcesContent":["import type { LitElement, PropertyValueMap } from 'lit';\nimport { BlindnetCore } from '../BlindnetCore.js';\n\ndeclare type Constructor<T = {}> = new (...args: any[]) => T;\n\nexport interface CoreConfigurationMixinInterface {\n  computationBaseURL: string;\n  apiToken: string;\n  adminToken: string;\n}\n\n/**\n * Add BlindnetCore configuration parameters to a component as properties\n *\n * All PC4W in the same document needs to use the same configuration.\n * Favor using BlindnetCore.configure when using more than one PC4W in the same document.\n */\nexport function CoreConfigurationMixin<\n  SuperClass extends Constructor<LitElement>\n>(\n  superClass: SuperClass\n): SuperClass & Constructor<CoreConfigurationMixinInterface> {\n  return class CoreConfiguratorElement extends superClass {\n    static get properties() {\n      // @ts-ignore\n      const superProps = super.properties || {};\n      return {\n        ...superProps,\n        computationBaseURL: { type: String, attribute: 'computation-base-url' },\n        apiToken: { type: String, attribute: 'api-token', reflect: true },\n        adminToken: { type: String, attribute: 'admin-token', reflect: true },\n      };\n    }\n\n    /**\n     * base URL of the computation API\n     * if \"false\", then a mocked endpoint will be used\n     * if empty, then the blindnet staging endpoint will be used\n     *\n     * @example 'https://localhost:9000/v0\n     */\n    computationBaseURL = '';\n\n    /**\n     * Auth token or user ID to use in the authorization header of API requests.\n     * if empty, no authorization header will be passed.\n     */\n    apiToken = '';\n\n    adminToken = '';\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      BlindnetCore.configure(\n        {\n          computationBaseUrl: this.computationBaseURL,\n          apiToken: this.apiToken,\n          adminToken: this.adminToken,\n        },\n        false\n      );\n    }\n\n    protected willUpdate(\n      _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n    ): void {\n      if (_changedProperties.has('apiToken') && this.apiToken) {\n        BlindnetCore.setToken(this.apiToken);\n      }\n      if (_changedProperties.has('adminToken') && this.adminToken) {\n        BlindnetCore.setAdminToken(this.adminToken);\n      }\n    }\n  };\n}\n"],"names":[],"mappings":";;AAWA;;;;;AAKG;AACG,SAAU,sBAAsB,CAGpC,UAAsB,EAAA;IAEtB,OAAO,MAAM,uBAAwB,SAAQ,UAAU,CAAA;AAAhD,QAAA,WAAA,GAAA;;AAYL;;;;;;AAMG;YACH,IAAkB,CAAA,kBAAA,GAAG,EAAE,CAAC;AAExB;;;AAGG;YACH,IAAQ,CAAA,QAAA,GAAG,EAAE,CAAC;YAEd,IAAU,CAAA,UAAA,GAAG,EAAE,CAAC;SAyBjB;AAnDC,QAAA,WAAW,UAAU,GAAA;;AAEnB,YAAA,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;YAC1C,OAAO;AACL,gBAAA,GAAG,UAAU;gBACb,kBAAkB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,sBAAsB,EAAE;AACvE,gBAAA,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE;AACjE,gBAAA,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,EAAE;aACtE,CAAC;SACH;QAmBD,iBAAiB,GAAA;YACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE1B,YAAY,CAAC,SAAS,CACpB;gBACE,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;gBAC3C,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,EACD,KAAK,CACN,CAAC;SACH;AAES,QAAA,UAAU,CAClB,kBAAqE,EAAA;YAErE,IAAI,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;AACvD,gBAAA,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,aAAA;YACD,IAAI,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3D,gBAAA,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC7C,aAAA;SACF;KACF,CAAC;AACJ;;;;"}