/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/v0/health': {
        /** Is the app running? */
        get: operations['getV0Health'];
    };
    '/v0/privacy-request': {
        /** Create a privacy request */
        post: operations['postV0Privacy-request'];
    };
    '/v0/privacy-request/history': {
        /** Get history of privacy requests */
        get: operations['getV0Privacy-requestHistory'];
    };
    '/v0/privacy-request/{requestId}': {
        /** Get privacy request status */
        get: operations['getV0Privacy-requestRequestid'];
    };
    '/v0/privacy-request/cancel': {
        /** Cancel a pending demand */
        post: operations['postV0Privacy-requestCancel'];
    };
    '/v0/consumer-interface/pending-requests': {
        /** Get the list of pending privacy request demands */
        get: operations['getV0Consumer-interfacePending-requests'];
    };
    '/v0/consumer-interface/pending-requests/{demandId}': {
        /** Get details of a pending privacy request */
        get: operations['getV0Consumer-interfacePending-requestsDemandid'];
    };
    '/v0/consumer-interface/pending-requests/approve': {
        /** Approve privacy request */
        post: operations['postV0Consumer-interfacePending-requestsApprove'];
    };
    '/v0/consumer-interface/pending-requests/deny': {
        /** Deny privacy request */
        post: operations['postV0Consumer-interfacePending-requestsDeny'];
    };
    '/v0/configure/general-info': {
        /** Get general information about the app */
        get: operations['getV0ConfigureGeneral-info'];
        /** Update general information about the app */
        put: operations['putV0ConfigureGeneral-info'];
    };
    '/v0/configure/privacy-scope-dimensions': {
        /** Get data categories, processing categories and purposes */
        get: operations['getV0ConfigurePrivacy-scope-dimensions'];
    };
    '/v0/configure/selectors': {
        /** Add selectors */
        put: operations['putV0ConfigureSelectors'];
    };
    '/v0/configure/legal-bases': {
        /** Get the list of legal bases */
        get: operations['getV0ConfigureLegal-bases'];
        /** Create new legal bases */
        put: operations['putV0ConfigureLegal-bases'];
    };
    '/v0/configure/legal-bases/{legalBaseId}': {
        /** Get a legal bases */
        get: operations['getV0ConfigureLegal-basesLegalbaseid'];
    };
    '/v0/configure/retention-policies': {
        /** Create retention policies for data categories */
        put: operations['putV0ConfigureRetention-policies'];
    };
    '/v0/configure/retention-policies/{retentionPolicyId}': {
        /** Delete retention policy */
        delete: operations['deleteV0ConfigureRetention-policiesRetentionpolicyid'];
    };
    '/v0/configure/provenances': {
        /** Create provenances for data categories */
        put: operations['putV0ConfigureProvenances'];
    };
    '/v0/configure/provenances/{provenanceId}': {
        /** Delete provenance */
        delete: operations['deleteV0ConfigureProvenancesProvenanceid'];
    };
    '/v0/configure/data-categories': {
        /** Get data categories with retention policies and provenances */
        get: operations['getV0ConfigureData-categories'];
    };
    '/v0/configure/regulations': {
        /** Get all regulations */
        get: operations['getV0ConfigureRegulations'];
        /** Assign regulation to an app */
        put: operations['putV0ConfigureRegulations'];
    };
    '/v0/configure/regulations/app': {
        /** Get regulations applied to the users of the app */
        get: operations['getV0ConfigureRegulationsApp'];
    };
    '/v0/configure/regulations/{regulationId}': {
        /** Delete regulation assigned to an app */
        delete: operations['deleteV0ConfigureRegulationsRegulationid'];
    };
    '/v0/configure/demand-resolution-strategy': {
        /** Get information about demand resolution strategies */
        get: operations['getV0ConfigureDemand-resolution-strategy'];
        /** Update demand resolution strategies */
        put: operations['putV0ConfigureDemand-resolution-strategy'];
    };
    '/v0/user-events/consent': {
        /** Add consent for a user */
        post: operations['postV0User-eventsConsent'];
    };
    '/v0/user-events/contract/start': {
        /** Start service contract for a user */
        post: operations['postV0User-eventsContractStart'];
    };
    '/v0/user-events/contract/end': {
        /** End service contract for a user */
        post: operations['postV0User-eventsContractEnd'];
    };
    '/v0/user-events/legitimate-interest/start': {
        /** Start legitimate interest for a user */
        post: operations['postV0User-eventsLegitimate-interestStart'];
    };
    '/v0/user-events/legitimate-interest/end': {
        /** End legitimate interest for a user */
        post: operations['postV0User-eventsLegitimate-interestEnd'];
    };
    '/v0/callback/{callbackId}': {
        /** Link to access data in the storage created */
        post: operations['postV0CallbackCallbackid'];
    };
}
export interface components {
    schemas: {
        AddRegulationsPayload: {
            regulation_ids?: string[];
        };
        ApproveDemandPayload: {
            /** Format: uuid */
            id: string;
            msg?: string;
            lang?: string;
        };
        CancelDemandPayload: {
            /** Format: uuid */
            demand_id: string;
        };
        ConsentRestriction: {
            /** Format: uuid */
            id: string;
        };
        CreateLegalBasePayload: {
            /**
             * @description type of the legal base
             * @example CONSENT
             * @enum {string}
             */
            lb_type: 'CONTRACT' | 'CONSENT' | 'LEGITIMATE-INTEREST' | 'NECESSARY' | 'NECESSARY.LEGAL-OBLIGATION' | 'NECESSARY.PUBLIC-INTEREST' | 'NECESSARY.VITAL-INTEREST' | 'OTHER-LEGAL-BASE';
            /**
             * @description legal base name
             * @example Contact form
             */
            name?: string;
            /**
             * @description legal base description
             * @example Collection of the contact data for advertising
             */
            description?: string;
            /**
             * @description privacy scope of the legal base
             * @example [
             *   {
             *     "dc": "CONTACT",
             *     "pc": "COLLECTION",
             *     "pp": "ADVERTISING"
             *   }
             * ]
             */
            scope?: components['schemas']['ScopePayload'][];
        };
        CreatePrivacyRequestPayload: {
            /** @enum {string} */
            target?: '*' | 'ORGANIZATION' | 'SYSTEM' | 'PARTNERS' | 'PARTNERS.DOWNWARD' | 'PARTNERS.UPWARD';
            email?: string;
            demands?: components['schemas']['PrivacyRequestDemand'][];
            data_subject?: components['schemas']['DataSubjectPayload'][];
        };
        /** @description origin of the data category */
        CreateProvenancePayload: {
            /**
             * @description data category for which the provenance is created
             * @example CONTACT.PHONE
             */
            data_category: string;
            /**
             * @description provenance type
             * @example USER
             * @enum {string}
             */
            provenance: '*' | 'DERIVED' | 'TRANSFERRED' | 'USER' | 'USER.DATA-SUBJECT';
            /**
             * @description id of the system data category originated from. null for own system
             * @example https://blindnet.io
             */
            system?: string;
        };
        /** @description keep CONTACT for no longer than 30 days after a service defined by a legal base ends */
        CreateRetentionPolicyPayload: {
            /**
             * @description data category for which the policy is created
             * @example CONTACT
             */
            data_category: string;
            /**
             * @description retention policy
             * @example NO-LONGER-THAN
             * @enum {string}
             */
            policy: 'NO-LONGER-THAN' | 'NO-LESS-THAN';
            /**
             * @description duration in JSON Schema duration format
             * @example P30D
             */
            duration: string;
            /**
             * @description event type to which the retention duration is relative to
             * @example SERVICE-END
             * @enum {string}
             */
            after: 'CAPTURE-DATE' | 'RELATIONSHIP-START' | 'RELATIONSHIP-END' | 'SERVICE-START' | 'SERVICE-END';
        };
        CreateSelectorPayload: {
            /**
             * @description selector name
             * @example HOME
             */
            name: string;
            /**
             * @description selector is the subcategory of this data category
             * @example CONTACT.ADDRESS
             */
            data_category: string;
        };
        DataCallbackPayload: {
            request_id: string;
            accepted: boolean;
            data_url?: string;
        };
        DataCategoryResponsePayload: {
            data_category: string;
            provenances?: components['schemas']['Provenance'][];
            retention_policies?: components['schemas']['RetentionPolicy'][];
        };
        DataReferenceRestriction: {
            ref?: string[];
        };
        DataSubjectPayload: {
            id: string;
            schema?: string;
        };
        DateRangeRestriction: {
            /** Format: date-time */
            from?: string;
            /** Format: date-time */
            to?: string;
        };
        /** @enum {string} */
        DemandResolution: 'auto' | 'manual';
        DemandResolutionStrategy: {
            transparency: components['schemas']['DemandResolution'];
            access: components['schemas']['DemandResolution'];
            delete: components['schemas']['DemandResolution'];
            consents: components['schemas']['DemandResolution'];
        };
        DenyDemandPayload: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            motive: 'IDENTITY-UNCONFIRMED' | 'LANGUAGE-UNSUPPORTED' | 'VALID-REASONS' | 'IMPOSSIBLE' | 'NO-SUCH-DATA' | 'REQUEST-UNSUPPORTED' | 'USER-UNKNOWN' | 'OTHER-MOTIVE';
            msg?: string;
            lang?: string;
        };
        EndContractPayload: {
            dataSubject: components['schemas']['DataSubjectPayload'];
            /** Format: uuid */
            contractId: string;
            /** Format: date-time */
            date: string;
        };
        EndLegitimateInterestPayload: {
            dataSubject: components['schemas']['DataSubjectPayload'];
            /** Format: uuid */
            legitimateInterestId: string;
            /** Format: date-time */
            date: string;
        };
        GeneralInformation: {
            /**
             * @description countries where data servers are located (including those of the processors who are processing data on your behalf
             * @example [
             *   "France",
             *   "USA"
             * ]
             */
            countries?: string[];
            /**
             * @description name and contact details of your Organization and its representative
             * @example blindnet
             */
            organization: string;
            /**
             * @description identity and contact of a Data Protection Officer - if you are using blindnet devkit Privacy Request Builder, include the URL where you are hosting the interface
             * @example Vuk Janosevic, www.blindnet.io/privacy-request-builder
             */
            dpo: string;
            /** @example Blindnet account managers, and Blindnet's DPO */
            data_consumer_categories?: string[];
            /**
             * @description public URL where your Privacy Policy can be consulted
             * @example https://blindnet.io/privacy
             */
            privacy_policy_link?: string;
            /**
             * @description general description of the technical and organizational security measures referred to in Article 32 of GDPR
             * @example We use administrative, technical, and physical safeguards to protect your personal data, taking into account the nature of the personal data and the processing, and the threats posed.
             */
            data_security_info?: string;
        };
        GiveConsentPayload: {
            dataSubject: components['schemas']['DataSubjectPayload'];
            /** Format: uuid */
            consentId: string;
            /** Format: date-time */
            date: string;
        };
        LegalBase: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            lb_type: 'CONTRACT' | 'CONSENT' | 'LEGITIMATE-INTEREST' | 'NECESSARY' | 'NECESSARY.LEGAL-OBLIGATION' | 'NECESSARY.PUBLIC-INTEREST' | 'NECESSARY.VITAL-INTEREST' | 'OTHER-LEGAL-BASE';
            scope: components['schemas']['PrivacyScope'];
            name?: string;
            description?: string;
            active: boolean;
        };
        PendingDemandDetailsPayload: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            action: 'ACCESS' | 'DELETE' | 'MODIFY' | 'OBJECT' | 'PORTABILITY' | 'RESTRICT' | 'REVOKE-CONSENT' | 'TRANSPARENCY' | 'TRANSPARENCY.DATA-CATEGORIES' | 'TRANSPARENCY.DPO' | 'TRANSPARENCY.KNOWN' | 'TRANSPARENCY.LEGAL-BASES' | 'TRANSPARENCY.ORGANIZATION' | 'TRANSPARENCY.POLICY' | 'TRANSPARENCY.PROCESSING-CATEGORIES' | 'TRANSPARENCY.PROVENANCE' | 'TRANSPARENCY.PURPOSE' | 'TRANSPARENCY.RETENTION' | 'TRANSPARENCY.WHERE' | 'TRANSPARENCY.WHO' | 'OTHER';
            data_subject?: components['schemas']['DataSubjectPayload'];
            recommendation?: components['schemas']['Recommendation'];
        };
        PendingDemandPayload: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            action: 'ACCESS' | 'DELETE' | 'MODIFY' | 'OBJECT' | 'PORTABILITY' | 'RESTRICT' | 'REVOKE-CONSENT' | 'TRANSPARENCY' | 'TRANSPARENCY.DATA-CATEGORIES' | 'TRANSPARENCY.DPO' | 'TRANSPARENCY.KNOWN' | 'TRANSPARENCY.LEGAL-BASES' | 'TRANSPARENCY.ORGANIZATION' | 'TRANSPARENCY.POLICY' | 'TRANSPARENCY.PROCESSING-CATEGORIES' | 'TRANSPARENCY.PROVENANCE' | 'TRANSPARENCY.PURPOSE' | 'TRANSPARENCY.RETENTION' | 'TRANSPARENCY.WHERE' | 'TRANSPARENCY.WHO' | 'OTHER';
            data_subject?: components['schemas']['DataSubjectPayload'];
        };
        PrItem: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            demands: number;
            /** @enum {string} */
            status: 'IN_PROCESSING' | 'PARTIALLY_COMPLETED' | 'COMPLETED' | 'CANCELED';
        };
        PrivacyRequestCreatedPayload: {
            /** Format: uuid */
            request_id: string;
        };
        PrivacyRequestDemand: {
            id: string;
            /** @enum {string} */
            action: 'ACCESS' | 'DELETE' | 'MODIFY' | 'OBJECT' | 'PORTABILITY' | 'RESTRICT' | 'REVOKE-CONSENT' | 'TRANSPARENCY' | 'TRANSPARENCY.DATA-CATEGORIES' | 'TRANSPARENCY.DPO' | 'TRANSPARENCY.KNOWN' | 'TRANSPARENCY.LEGAL-BASES' | 'TRANSPARENCY.ORGANIZATION' | 'TRANSPARENCY.POLICY' | 'TRANSPARENCY.PROCESSING-CATEGORIES' | 'TRANSPARENCY.PROVENANCE' | 'TRANSPARENCY.PURPOSE' | 'TRANSPARENCY.RETENTION' | 'TRANSPARENCY.WHERE' | 'TRANSPARENCY.WHO' | 'OTHER';
            message?: string;
            language?: string;
            data?: string[];
            restrictions?: components['schemas']['Restrictions'];
        };
        PrivacyResponsePayload: {
            /** Format: uuid */
            demand_id: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            requested_action: 'ACCESS' | 'DELETE' | 'MODIFY' | 'OBJECT' | 'PORTABILITY' | 'RESTRICT' | 'REVOKE-CONSENT' | 'TRANSPARENCY' | 'TRANSPARENCY.DATA-CATEGORIES' | 'TRANSPARENCY.DPO' | 'TRANSPARENCY.KNOWN' | 'TRANSPARENCY.LEGAL-BASES' | 'TRANSPARENCY.ORGANIZATION' | 'TRANSPARENCY.POLICY' | 'TRANSPARENCY.PROCESSING-CATEGORIES' | 'TRANSPARENCY.PROVENANCE' | 'TRANSPARENCY.PURPOSE' | 'TRANSPARENCY.RETENTION' | 'TRANSPARENCY.WHERE' | 'TRANSPARENCY.WHO' | 'OTHER';
            /** @enum {string} */
            status: 'GRANTED' | 'DENIED' | 'PARTIALLY-GRANTED' | 'UNDER-REVIEW' | 'CANCELED';
            /** @enum {string} */
            motive?: 'IDENTITY-UNCONFIRMED' | 'LANGUAGE-UNSUPPORTED' | 'VALID-REASONS' | 'IMPOSSIBLE' | 'NO-SUCH-DATA' | 'REQUEST-UNSUPPORTED' | 'USER-UNKNOWN' | 'OTHER-MOTIVE';
            answer?: unknown;
            message?: string;
            lang?: string;
            includes?: unknown[];
            data?: string;
        };
        PrivacyScope: {
            triples?: components['schemas']['PrivacyScopeTriple'][];
        };
        PrivacyScopeDimensionsPayload: {
            data_categories?: string[];
            processing_categories?: ('*' | 'ANONYMIZATION' | 'AUTOMATED-INFERENCE' | 'AUTOMATED-DECISION-MAKING' | 'COLLECTION' | 'GENERATING' | 'PUBLISHING' | 'STORING' | 'SHARING' | 'USING' | 'OTHER-PROCESSING')[];
            purposes?: ('*' | 'ADVERTISING' | 'COMPLIANCE' | 'EMPLOYMENT' | 'JUSTICE' | 'MARKETING' | 'MEDICAL' | 'PERSONALIZATION' | 'PUBLIC-INTERESTS' | 'RESEARCH' | 'SALE' | 'SECURITY' | 'SERVICES' | 'SERVICES.ADDITIONAL-SERVICES' | 'SERVICES.BASIC-SERVICE' | 'SOCIAL-PROTECTION' | 'TRACKING' | 'VITAL-INTERESTS' | 'OTHER-PURPOSE')[];
        };
        PrivacyScopeRestriction: {
            dc: string;
            /** @enum {string} */
            pc: '*' | 'ANONYMIZATION' | 'AUTOMATED-INFERENCE' | 'AUTOMATED-DECISION-MAKING' | 'COLLECTION' | 'GENERATING' | 'PUBLISHING' | 'STORING' | 'SHARING' | 'USING' | 'OTHER-PROCESSING';
            /** @enum {string} */
            pp: '*' | 'ADVERTISING' | 'COMPLIANCE' | 'EMPLOYMENT' | 'JUSTICE' | 'MARKETING' | 'MEDICAL' | 'PERSONALIZATION' | 'PUBLIC-INTERESTS' | 'RESEARCH' | 'SALE' | 'SECURITY' | 'SERVICES' | 'SERVICES.ADDITIONAL-SERVICES' | 'SERVICES.BASIC-SERVICE' | 'SOCIAL-PROTECTION' | 'TRACKING' | 'VITAL-INTERESTS' | 'OTHER-PURPOSE';
        };
        PrivacyScopeTriple: {
            data_category: string;
            /** @enum {string} */
            processing_category: '*' | 'ANONYMIZATION' | 'AUTOMATED-INFERENCE' | 'AUTOMATED-DECISION-MAKING' | 'COLLECTION' | 'GENERATING' | 'PUBLISHING' | 'STORING' | 'SHARING' | 'USING' | 'OTHER-PROCESSING';
            /** @enum {string} */
            purpose: '*' | 'ADVERTISING' | 'COMPLIANCE' | 'EMPLOYMENT' | 'JUSTICE' | 'MARKETING' | 'MEDICAL' | 'PERSONALIZATION' | 'PUBLIC-INTERESTS' | 'RESEARCH' | 'SALE' | 'SECURITY' | 'SERVICES' | 'SERVICES.ADDITIONAL-SERVICES' | 'SERVICES.BASIC-SERVICE' | 'SOCIAL-PROTECTION' | 'TRACKING' | 'VITAL-INTERESTS' | 'OTHER-PURPOSE';
        };
        Provenance: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            provenance: '*' | 'DERIVED' | 'TRANSFERRED' | 'USER' | 'USER.DATA-SUBJECT';
            system?: string;
        };
        ProvenanceRestriction: {
            /** @enum {string} */
            term: '*' | 'DERIVED' | 'TRANSFERRED' | 'USER' | 'USER.DATA-SUBJECT';
            /** @enum {string} */
            target?: '*' | 'ORGANIZATION' | 'SYSTEM' | 'PARTNERS' | 'PARTNERS.DOWNWARD' | 'PARTNERS.UPWARD';
        };
        Recommendation: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            d_id: string;
            /** @enum {string} */
            status?: 'GRANTED' | 'DENIED' | 'PARTIALLY-GRANTED' | 'UNDER-REVIEW' | 'CANCELED';
            /** @enum {string} */
            motive?: 'IDENTITY-UNCONFIRMED' | 'LANGUAGE-UNSUPPORTED' | 'VALID-REASONS' | 'IMPOSSIBLE' | 'NO-SUCH-DATA' | 'REQUEST-UNSUPPORTED' | 'USER-UNKNOWN' | 'OTHER-MOTIVE';
            data_categories?: string[];
            /** Format: date-time */
            date_from?: string;
            /** Format: date-time */
            date_to?: string;
            /** @enum {string} */
            provenance?: '*' | 'DERIVED' | 'TRANSFERRED' | 'USER' | 'USER.DATA-SUBJECT';
            /** @enum {string} */
            target?: '*' | 'ORGANIZATION' | 'SYSTEM' | 'PARTNERS' | 'PARTNERS.DOWNWARD' | 'PARTNERS.UPWARD';
        };
        RegulationResponsePayload: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
        };
        RequestHistoryPayload: {
            history?: components['schemas']['PrItem'][];
        };
        Restrictions: {
            privacy_scope?: components['schemas']['PrivacyScopeRestriction'][];
            consent?: components['schemas']['ConsentRestriction'];
            date_range?: components['schemas']['DateRangeRestriction'];
            provenance?: components['schemas']['ProvenanceRestriction'];
            data_reference?: components['schemas']['DataReferenceRestriction'];
        };
        RetentionPolicy: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            policy_type: 'NO-LONGER-THAN' | 'NO-LESS-THAN';
            duration: string;
            /** @enum {string} */
            after: 'CAPTURE-DATE' | 'RELATIONSHIP-START' | 'RELATIONSHIP-END' | 'SERVICE-START' | 'SERVICE-END';
        };
        ScopePayload: {
            dc: string;
            /** @enum {string} */
            pc: '*' | 'ANONYMIZATION' | 'AUTOMATED-INFERENCE' | 'AUTOMATED-DECISION-MAKING' | 'COLLECTION' | 'GENERATING' | 'PUBLISHING' | 'STORING' | 'SHARING' | 'USING' | 'OTHER-PROCESSING';
            /** @enum {string} */
            pp: '*' | 'ADVERTISING' | 'COMPLIANCE' | 'EMPLOYMENT' | 'JUSTICE' | 'MARKETING' | 'MEDICAL' | 'PERSONALIZATION' | 'PUBLIC-INTERESTS' | 'RESEARCH' | 'SALE' | 'SECURITY' | 'SERVICES' | 'SERVICES.ADDITIONAL-SERVICES' | 'SERVICES.BASIC-SERVICE' | 'SOCIAL-PROTECTION' | 'TRACKING' | 'VITAL-INTERESTS' | 'OTHER-PURPOSE';
        };
        StartContractPayload: {
            dataSubject: components['schemas']['DataSubjectPayload'];
            /** Format: uuid */
            contractId: string;
            /** Format: date-time */
            date: string;
        };
        StartLegitimateInterestPayload: {
            dataSubject: components['schemas']['DataSubjectPayload'];
            /** Format: uuid */
            legitimateInterestId: string;
            /** Format: date-time */
            date: string;
        };
    };
}
export interface operations {
    /** Is the app running? */
    getV0Health: {
        responses: {
            200: unknown;
        };
    };
    /** Create a privacy request */
    'postV0Privacy-request': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['PrivacyRequestCreatedPayload'];
                };
            };
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePrivacyRequestPayload'];
            };
        };
    };
    /** Get history of privacy requests */
    'getV0Privacy-requestHistory': {
        parameters: {
            header: {
                Authorization: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['RequestHistoryPayload'];
                };
            };
            /** Invalid value for: header Authorization */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    /** Get privacy request status */
    'getV0Privacy-requestRequestid': {
        parameters: {
            path: {
                requestId: string;
            };
            header: {
                Authorization: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['PrivacyResponsePayload'][];
                };
            };
            /** Invalid value for: path parameter requestId, Invalid value for: header Authorization */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
    };
    /** Cancel a pending demand */
    'postV0Privacy-requestCancel': {
        parameters: {
            header: {
                Authorization: string;
            };
        };
        responses: {
            200: unknown;
            /** Invalid value for: header Authorization, Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CancelDemandPayload'];
            };
        };
    };
    /** Get the list of pending privacy request demands */
    'getV0Consumer-interfacePending-requests': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['PendingDemandPayload'][];
                };
            };
        };
    };
    /** Get details of a pending privacy request */
    'getV0Consumer-interfacePending-requestsDemandid': {
        parameters: {
            path: {
                demandId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['PendingDemandDetailsPayload'];
                };
            };
            /** Invalid value for: path parameter demandId */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
    };
    /** Approve privacy request */
    'postV0Consumer-interfacePending-requestsApprove': {
        responses: {
            200: unknown;
            400: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ApproveDemandPayload'];
            };
        };
    };
    /** Deny privacy request */
    'postV0Consumer-interfacePending-requestsDeny': {
        responses: {
            200: unknown;
            400: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DenyDemandPayload'];
            };
        };
    };
    /** Get general information about the app */
    'getV0ConfigureGeneral-info': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['GeneralInformation'];
                };
            };
        };
    };
    /** Update general information about the app */
    'putV0ConfigureGeneral-info': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GeneralInformation'];
            };
        };
    };
    /** Get data categories, processing categories and purposes */
    'getV0ConfigurePrivacy-scope-dimensions': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['PrivacyScopeDimensionsPayload'];
                };
            };
        };
    };
    /** Add selectors */
    putV0ConfigureSelectors: {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateSelectorPayload'][];
            };
        };
    };
    /** Get the list of legal bases */
    'getV0ConfigureLegal-bases': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['LegalBase'][];
                };
            };
        };
    };
    /** Create new legal bases */
    'putV0ConfigureLegal-bases': {
        responses: {
            200: {
                content: {
                    'text/plain': string;
                };
            };
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateLegalBasePayload'];
            };
        };
    };
    /** Get a legal bases */
    'getV0ConfigureLegal-basesLegalbaseid': {
        parameters: {
            path: {
                legalBaseId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['LegalBase'];
                };
            };
            /** Invalid value for: path parameter legalBaseId */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    /** Create retention policies for data categories */
    'putV0ConfigureRetention-policies': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateRetentionPolicyPayload'][];
            };
        };
    };
    /** Delete retention policy */
    'deleteV0ConfigureRetention-policiesRetentionpolicyid': {
        parameters: {
            path: {
                retentionPolicyId: string;
            };
        };
        responses: {
            200: unknown;
            /** Invalid value for: path parameter retentionPolicyId */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    /** Create provenances for data categories */
    putV0ConfigureProvenances: {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateProvenancePayload'][];
            };
        };
    };
    /** Delete provenance */
    deleteV0ConfigureProvenancesProvenanceid: {
        parameters: {
            path: {
                provenanceId: string;
            };
        };
        responses: {
            200: unknown;
            /** Invalid value for: path parameter provenanceId */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    /** Get data categories with retention policies and provenances */
    'getV0ConfigureData-categories': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['DataCategoryResponsePayload'][];
                };
            };
        };
    };
    /** Get all regulations */
    getV0ConfigureRegulations: {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['RegulationResponsePayload'][];
                };
            };
        };
    };
    /** Assign regulation to an app */
    putV0ConfigureRegulations: {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AddRegulationsPayload'];
            };
        };
    };
    /** Get regulations applied to the users of the app */
    getV0ConfigureRegulationsApp: {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['RegulationResponsePayload'][];
                };
            };
        };
    };
    /** Delete regulation assigned to an app */
    deleteV0ConfigureRegulationsRegulationid: {
        parameters: {
            path: {
                regulationId: string;
            };
        };
        responses: {
            200: unknown;
            /** Invalid value for: path parameter regulationId */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    /** Get information about demand resolution strategies */
    'getV0ConfigureDemand-resolution-strategy': {
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['DemandResolutionStrategy'];
                };
            };
        };
    };
    /** Update demand resolution strategies */
    'putV0ConfigureDemand-resolution-strategy': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DemandResolutionStrategy'];
            };
        };
    };
    /** Add consent for a user */
    'postV0User-eventsConsent': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GiveConsentPayload'];
            };
        };
    };
    /** Start service contract for a user */
    'postV0User-eventsContractStart': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StartContractPayload'];
            };
        };
    };
    /** End service contract for a user */
    'postV0User-eventsContractEnd': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['EndContractPayload'];
            };
        };
    };
    /** Start legitimate interest for a user */
    'postV0User-eventsLegitimate-interestStart': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StartLegitimateInterestPayload'];
            };
        };
    };
    /** End legitimate interest for a user */
    'postV0User-eventsLegitimate-interestEnd': {
        responses: {
            200: unknown;
            /** Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['EndLegitimateInterestPayload'];
            };
        };
    };
    /** Link to access data in the storage created */
    postV0CallbackCallbackid: {
        parameters: {
            path: {
                callbackId: string;
            };
        };
        responses: {
            200: unknown;
            /** Invalid value for: path parameter callbackId, Invalid value for: body */
            400: {
                content: {
                    'text/plain': string;
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DataCallbackPayload'];
            };
        };
    };
}
export interface external {
}
