/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PrivacyScope } from './PrivacyScope';
import {
  PrivacyScopeFromJSON,
  PrivacyScopeFromJSONTyped,
  PrivacyScopeToJSON,
} from './PrivacyScope';

/**
 *
 * @export
 * @interface LegalBase
 */
export interface LegalBase {
  /**
   *
   * @type {string}
   * @memberof LegalBase
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof LegalBase
   */
  lbType: LegalBaseLbTypeEnum;
  /**
   *
   * @type {PrivacyScope}
   * @memberof LegalBase
   */
  scope: PrivacyScope;
  /**
   *
   * @type {string}
   * @memberof LegalBase
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof LegalBase
   */
  description?: string;
  /**
   *
   * @type {boolean}
   * @memberof LegalBase
   */
  active: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum LegalBaseLbTypeEnum {
  Contract = 'CONTRACT',
  Consent = 'CONSENT',
  LegitimateInterest = 'LEGITIMATE-INTEREST',
  Necessary = 'NECESSARY',
  NecessaryLegalObligation = 'NECESSARY.LEGAL-OBLIGATION',
  NecessaryPublicInterest = 'NECESSARY.PUBLIC-INTEREST',
  NecessaryVitalInterest = 'NECESSARY.VITAL-INTEREST',
  OtherLegalBase = 'OTHER-LEGAL-BASE',
}

/**
 * Check if a given object implements the LegalBase interface.
 */
export function instanceOfLegalBase(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'lbType' in value;
  isInstance = isInstance && 'scope' in value;
  isInstance = isInstance && 'active' in value;

  return isInstance;
}

export function LegalBaseFromJSON(json: any): LegalBase {
  return LegalBaseFromJSONTyped(json, false);
}

export function LegalBaseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): LegalBase {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    lbType: json['lb_type'],
    scope: PrivacyScopeFromJSON(json['scope']),
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    active: json['active'],
  };
}

export function LegalBaseToJSON(value?: LegalBase | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    lb_type: value.lbType,
    scope: PrivacyScopeToJSON(value.scope),
    name: value.name,
    description: value.description,
    active: value.active,
  };
}
