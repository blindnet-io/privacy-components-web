/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ProvenanceRestriction
 */
export interface ProvenanceRestriction {
  /**
   *
   * @type {string}
   * @memberof ProvenanceRestriction
   */
  term: ProvenanceRestrictionTermEnum;
  /**
   *
   * @type {string}
   * @memberof ProvenanceRestriction
   */
  target?: ProvenanceRestrictionTargetEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ProvenanceRestrictionTermEnum {
  Star = '*',
  Derived = 'DERIVED',
  Transferred = 'TRANSFERRED',
  User = 'USER',
  UserDataSubject = 'USER.DATA-SUBJECT',
}
/**
 * @export
 * @enum {string}
 */
export enum ProvenanceRestrictionTargetEnum {
  Star = '*',
  Organization = 'ORGANIZATION',
  System = 'SYSTEM',
  Partners = 'PARTNERS',
  PartnersDownward = 'PARTNERS.DOWNWARD',
  PartnersUpward = 'PARTNERS.UPWARD',
}

/**
 * Check if a given object implements the ProvenanceRestriction interface.
 */
export function instanceOfProvenanceRestriction(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'term' in value;

  return isInstance;
}

export function ProvenanceRestrictionFromJSON(
  json: any
): ProvenanceRestriction {
  return ProvenanceRestrictionFromJSONTyped(json, false);
}

export function ProvenanceRestrictionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ProvenanceRestriction {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    term: json['term'],
    target: !exists(json, 'target') ? undefined : json['target'],
  };
}

export function ProvenanceRestrictionToJSON(
  value?: ProvenanceRestriction | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    term: value.term,
    target: value.target,
  };
}
