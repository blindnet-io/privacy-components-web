/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  EndContractPayload,
  EndLegitimateInterestPayload,
  GiveConsentPayload,
  StartContractPayload,
  StartLegitimateInterestPayload,
} from '../models';
import {
  EndContractPayloadFromJSON,
  EndContractPayloadToJSON,
  EndLegitimateInterestPayloadFromJSON,
  EndLegitimateInterestPayloadToJSON,
  GiveConsentPayloadFromJSON,
  GiveConsentPayloadToJSON,
  StartContractPayloadFromJSON,
  StartContractPayloadToJSON,
  StartLegitimateInterestPayloadFromJSON,
  StartLegitimateInterestPayloadToJSON,
} from '../models';

export interface PostV0UserEventsConsentRequest {
  giveConsentPayload: GiveConsentPayload;
}

export interface PostV0UserEventsContractEndRequest {
  endContractPayload: EndContractPayload;
}

export interface PostV0UserEventsContractStartRequest {
  startContractPayload: StartContractPayload;
}

export interface PostV0UserEventsLegitimateInterestEndRequest {
  endLegitimateInterestPayload: EndLegitimateInterestPayload;
}

export interface PostV0UserEventsLegitimateInterestStartRequest {
  startLegitimateInterestPayload: StartLegitimateInterestPayload;
}

/**
 *
 */
export class UserEventsApi extends runtime.BaseAPI {
  /**
   * Add consent for a user
   */
  async postV0UserEventsConsentRaw(
    requestParameters: PostV0UserEventsConsentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.giveConsentPayload === null ||
      requestParameters.giveConsentPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'giveConsentPayload',
        'Required parameter requestParameters.giveConsentPayload was null or undefined when calling postV0UserEventsConsent.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/user-events/consent`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GiveConsentPayloadToJSON(requestParameters.giveConsentPayload),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add consent for a user
   */
  async postV0UserEventsConsent(
    requestParameters: PostV0UserEventsConsentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0UserEventsConsentRaw(requestParameters, initOverrides);
  }

  /**
   * End service contract for a user
   */
  async postV0UserEventsContractEndRaw(
    requestParameters: PostV0UserEventsContractEndRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.endContractPayload === null ||
      requestParameters.endContractPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'endContractPayload',
        'Required parameter requestParameters.endContractPayload was null or undefined when calling postV0UserEventsContractEnd.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/user-events/contract/end`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EndContractPayloadToJSON(requestParameters.endContractPayload),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * End service contract for a user
   */
  async postV0UserEventsContractEnd(
    requestParameters: PostV0UserEventsContractEndRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0UserEventsContractEndRaw(requestParameters, initOverrides);
  }

  /**
   * Start service contract for a user
   */
  async postV0UserEventsContractStartRaw(
    requestParameters: PostV0UserEventsContractStartRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startContractPayload === null ||
      requestParameters.startContractPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'startContractPayload',
        'Required parameter requestParameters.startContractPayload was null or undefined when calling postV0UserEventsContractStart.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/user-events/contract/start`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StartContractPayloadToJSON(
          requestParameters.startContractPayload
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Start service contract for a user
   */
  async postV0UserEventsContractStart(
    requestParameters: PostV0UserEventsContractStartRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0UserEventsContractStartRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * End legitimate interest for a user
   */
  async postV0UserEventsLegitimateInterestEndRaw(
    requestParameters: PostV0UserEventsLegitimateInterestEndRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.endLegitimateInterestPayload === null ||
      requestParameters.endLegitimateInterestPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'endLegitimateInterestPayload',
        'Required parameter requestParameters.endLegitimateInterestPayload was null or undefined when calling postV0UserEventsLegitimateInterestEnd.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/user-events/legitimate-interest/end`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EndLegitimateInterestPayloadToJSON(
          requestParameters.endLegitimateInterestPayload
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * End legitimate interest for a user
   */
  async postV0UserEventsLegitimateInterestEnd(
    requestParameters: PostV0UserEventsLegitimateInterestEndRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0UserEventsLegitimateInterestEndRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Start legitimate interest for a user
   */
  async postV0UserEventsLegitimateInterestStartRaw(
    requestParameters: PostV0UserEventsLegitimateInterestStartRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startLegitimateInterestPayload === null ||
      requestParameters.startLegitimateInterestPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'startLegitimateInterestPayload',
        'Required parameter requestParameters.startLegitimateInterestPayload was null or undefined when calling postV0UserEventsLegitimateInterestStart.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/user-events/legitimate-interest/start`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StartLegitimateInterestPayloadToJSON(
          requestParameters.startLegitimateInterestPayload
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Start legitimate interest for a user
   */
  async postV0UserEventsLegitimateInterestStart(
    requestParameters: PostV0UserEventsLegitimateInterestStartRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0UserEventsLegitimateInterestStartRaw(
      requestParameters,
      initOverrides
    );
  }
}
