/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AddRegulationsPayload,
  CreateLegalBasePayload,
  CreateProvenancePayload,
  CreateRetentionPolicyPayload,
  CreateSelectorPayload,
  DataCategoryResponsePayload,
  DemandResolutionStrategy,
  GeneralInformation,
  LegalBase,
  PrivacyScopeDimensionsPayload,
  RegulationResponsePayload,
} from '../models';
import {
  AddRegulationsPayloadFromJSON,
  AddRegulationsPayloadToJSON,
  CreateLegalBasePayloadFromJSON,
  CreateLegalBasePayloadToJSON,
  CreateProvenancePayloadFromJSON,
  CreateProvenancePayloadToJSON,
  CreateRetentionPolicyPayloadFromJSON,
  CreateRetentionPolicyPayloadToJSON,
  CreateSelectorPayloadFromJSON,
  CreateSelectorPayloadToJSON,
  DataCategoryResponsePayloadFromJSON,
  DataCategoryResponsePayloadToJSON,
  DemandResolutionStrategyFromJSON,
  DemandResolutionStrategyToJSON,
  GeneralInformationFromJSON,
  GeneralInformationToJSON,
  LegalBaseFromJSON,
  LegalBaseToJSON,
  PrivacyScopeDimensionsPayloadFromJSON,
  PrivacyScopeDimensionsPayloadToJSON,
  RegulationResponsePayloadFromJSON,
  RegulationResponsePayloadToJSON,
} from '../models';

export interface DeleteV0ConfigureProvenancesProvenanceidRequest {
  provenanceId: string;
}

export interface DeleteV0ConfigureRegulationsRegulationidRequest {
  regulationId: string;
}

export interface DeleteV0ConfigureRetentionPoliciesRetentionpolicyidRequest {
  retentionPolicyId: string;
}

export interface GetV0ConfigureLegalBasesLegalbaseidRequest {
  legalBaseId: string;
}

export interface PutV0ConfigureDemandResolutionStrategyRequest {
  demandResolutionStrategy: DemandResolutionStrategy;
}

export interface PutV0ConfigureGeneralInfoRequest {
  generalInformation: GeneralInformation;
}

export interface PutV0ConfigureLegalBasesRequest {
  createLegalBasePayload: CreateLegalBasePayload;
}

export interface PutV0ConfigureProvenancesRequest {
  createProvenancePayload?: Array<CreateProvenancePayload>;
}

export interface PutV0ConfigureRegulationsRequest {
  addRegulationsPayload: AddRegulationsPayload;
}

export interface PutV0ConfigureRetentionPoliciesRequest {
  createRetentionPolicyPayload?: Array<CreateRetentionPolicyPayload>;
}

export interface PutV0ConfigureSelectorsRequest {
  createSelectorPayload?: Array<CreateSelectorPayload>;
}

/**
 *
 */
export class ConfigurationApi extends runtime.BaseAPI {
  /**
   * Delete provenance
   */
  async deleteV0ConfigureProvenancesProvenanceidRaw(
    requestParameters: DeleteV0ConfigureProvenancesProvenanceidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.provenanceId === null ||
      requestParameters.provenanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'provenanceId',
        'Required parameter requestParameters.provenanceId was null or undefined when calling deleteV0ConfigureProvenancesProvenanceid.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/provenances/{provenanceId}`.replace(
          `{${'provenanceId'}}`,
          encodeURIComponent(String(requestParameters.provenanceId))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete provenance
   */
  async deleteV0ConfigureProvenancesProvenanceid(
    requestParameters: DeleteV0ConfigureProvenancesProvenanceidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteV0ConfigureProvenancesProvenanceidRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Delete regulation assigned to an app
   */
  async deleteV0ConfigureRegulationsRegulationidRaw(
    requestParameters: DeleteV0ConfigureRegulationsRegulationidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.regulationId === null ||
      requestParameters.regulationId === undefined
    ) {
      throw new runtime.RequiredError(
        'regulationId',
        'Required parameter requestParameters.regulationId was null or undefined when calling deleteV0ConfigureRegulationsRegulationid.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/regulations/{regulationId}`.replace(
          `{${'regulationId'}}`,
          encodeURIComponent(String(requestParameters.regulationId))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete regulation assigned to an app
   */
  async deleteV0ConfigureRegulationsRegulationid(
    requestParameters: DeleteV0ConfigureRegulationsRegulationidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteV0ConfigureRegulationsRegulationidRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Delete retention policy
   */
  async deleteV0ConfigureRetentionPoliciesRetentionpolicyidRaw(
    requestParameters: DeleteV0ConfigureRetentionPoliciesRetentionpolicyidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.retentionPolicyId === null ||
      requestParameters.retentionPolicyId === undefined
    ) {
      throw new runtime.RequiredError(
        'retentionPolicyId',
        'Required parameter requestParameters.retentionPolicyId was null or undefined when calling deleteV0ConfigureRetentionPoliciesRetentionpolicyid.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/retention-policies/{retentionPolicyId}`.replace(
          `{${'retentionPolicyId'}}`,
          encodeURIComponent(String(requestParameters.retentionPolicyId))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete retention policy
   */
  async deleteV0ConfigureRetentionPoliciesRetentionpolicyid(
    requestParameters: DeleteV0ConfigureRetentionPoliciesRetentionpolicyidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteV0ConfigureRetentionPoliciesRetentionpolicyidRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Get data categories with retention policies and provenances
   */
  async getV0ConfigureDataCategoriesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<DataCategoryResponsePayload>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/data-categories`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(DataCategoryResponsePayloadFromJSON)
    );
  }

  /**
   * Get data categories with retention policies and provenances
   */
  async getV0ConfigureDataCategories(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<DataCategoryResponsePayload>> {
    const response = await this.getV0ConfigureDataCategoriesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get information about demand resolution strategies
   */
  async getV0ConfigureDemandResolutionStrategyRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<DemandResolutionStrategy>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/demand-resolution-strategy`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      DemandResolutionStrategyFromJSON(jsonValue)
    );
  }

  /**
   * Get information about demand resolution strategies
   */
  async getV0ConfigureDemandResolutionStrategy(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<DemandResolutionStrategy> {
    const response = await this.getV0ConfigureDemandResolutionStrategyRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get general information about the app
   */
  async getV0ConfigureGeneralInfoRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GeneralInformation>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/general-info`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      GeneralInformationFromJSON(jsonValue)
    );
  }

  /**
   * Get general information about the app
   */
  async getV0ConfigureGeneralInfo(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GeneralInformation> {
    const response = await this.getV0ConfigureGeneralInfoRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the list of legal bases
   */
  async getV0ConfigureLegalBasesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<LegalBase>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/legal-bases`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(LegalBaseFromJSON)
    );
  }

  /**
   * Get the list of legal bases
   */
  async getV0ConfigureLegalBases(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<LegalBase>> {
    const response = await this.getV0ConfigureLegalBasesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a legal bases
   */
  async getV0ConfigureLegalBasesLegalbaseidRaw(
    requestParameters: GetV0ConfigureLegalBasesLegalbaseidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LegalBase>> {
    if (
      requestParameters.legalBaseId === null ||
      requestParameters.legalBaseId === undefined
    ) {
      throw new runtime.RequiredError(
        'legalBaseId',
        'Required parameter requestParameters.legalBaseId was null or undefined when calling getV0ConfigureLegalBasesLegalbaseid.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/legal-bases/{legalBaseId}`.replace(
          `{${'legalBaseId'}}`,
          encodeURIComponent(String(requestParameters.legalBaseId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      LegalBaseFromJSON(jsonValue)
    );
  }

  /**
   * Get a legal bases
   */
  async getV0ConfigureLegalBasesLegalbaseid(
    requestParameters: GetV0ConfigureLegalBasesLegalbaseidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LegalBase> {
    const response = await this.getV0ConfigureLegalBasesLegalbaseidRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get data categories, processing categories and purposes
   */
  async getV0ConfigurePrivacyScopeDimensionsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PrivacyScopeDimensionsPayload>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/privacy-scope-dimensions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      PrivacyScopeDimensionsPayloadFromJSON(jsonValue)
    );
  }

  /**
   * Get data categories, processing categories and purposes
   */
  async getV0ConfigurePrivacyScopeDimensions(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PrivacyScopeDimensionsPayload> {
    const response = await this.getV0ConfigurePrivacyScopeDimensionsRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all regulations
   */
  async getV0ConfigureRegulationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<RegulationResponsePayload>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/regulations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(RegulationResponsePayloadFromJSON)
    );
  }

  /**
   * Get all regulations
   */
  async getV0ConfigureRegulations(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<RegulationResponsePayload>> {
    const response = await this.getV0ConfigureRegulationsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get regulations applied to the users of the app
   */
  async getV0ConfigureRegulationsAppRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<RegulationResponsePayload>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/configure/regulations/app`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(RegulationResponsePayloadFromJSON)
    );
  }

  /**
   * Get regulations applied to the users of the app
   */
  async getV0ConfigureRegulationsApp(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<RegulationResponsePayload>> {
    const response = await this.getV0ConfigureRegulationsAppRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update demand resolution strategies
   */
  async putV0ConfigureDemandResolutionStrategyRaw(
    requestParameters: PutV0ConfigureDemandResolutionStrategyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.demandResolutionStrategy === null ||
      requestParameters.demandResolutionStrategy === undefined
    ) {
      throw new runtime.RequiredError(
        'demandResolutionStrategy',
        'Required parameter requestParameters.demandResolutionStrategy was null or undefined when calling putV0ConfigureDemandResolutionStrategy.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/demand-resolution-strategy`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: DemandResolutionStrategyToJSON(
          requestParameters.demandResolutionStrategy
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update demand resolution strategies
   */
  async putV0ConfigureDemandResolutionStrategy(
    requestParameters: PutV0ConfigureDemandResolutionStrategyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureDemandResolutionStrategyRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Update general information about the app
   */
  async putV0ConfigureGeneralInfoRaw(
    requestParameters: PutV0ConfigureGeneralInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.generalInformation === null ||
      requestParameters.generalInformation === undefined
    ) {
      throw new runtime.RequiredError(
        'generalInformation',
        'Required parameter requestParameters.generalInformation was null or undefined when calling putV0ConfigureGeneralInfo.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/general-info`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: GeneralInformationToJSON(requestParameters.generalInformation),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update general information about the app
   */
  async putV0ConfigureGeneralInfo(
    requestParameters: PutV0ConfigureGeneralInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureGeneralInfoRaw(requestParameters, initOverrides);
  }

  /**
   * Create new legal bases
   */
  async putV0ConfigureLegalBasesRaw(
    requestParameters: PutV0ConfigureLegalBasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.createLegalBasePayload === null ||
      requestParameters.createLegalBasePayload === undefined
    ) {
      throw new runtime.RequiredError(
        'createLegalBasePayload',
        'Required parameter requestParameters.createLegalBasePayload was null or undefined when calling putV0ConfigureLegalBases.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/legal-bases`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateLegalBasePayloadToJSON(
          requestParameters.createLegalBasePayload
        ),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Create new legal bases
   */
  async putV0ConfigureLegalBases(
    requestParameters: PutV0ConfigureLegalBasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.putV0ConfigureLegalBasesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Create provenances for data categories
   */
  async putV0ConfigureProvenancesRaw(
    requestParameters: PutV0ConfigureProvenancesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/provenances`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createProvenancePayload.map(
          CreateProvenancePayloadToJSON
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create provenances for data categories
   */
  async putV0ConfigureProvenances(
    requestParameters: PutV0ConfigureProvenancesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureProvenancesRaw(requestParameters, initOverrides);
  }

  /**
   * Assign regulation to an app
   */
  async putV0ConfigureRegulationsRaw(
    requestParameters: PutV0ConfigureRegulationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.addRegulationsPayload === null ||
      requestParameters.addRegulationsPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'addRegulationsPayload',
        'Required parameter requestParameters.addRegulationsPayload was null or undefined when calling putV0ConfigureRegulations.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/regulations`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AddRegulationsPayloadToJSON(
          requestParameters.addRegulationsPayload
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Assign regulation to an app
   */
  async putV0ConfigureRegulations(
    requestParameters: PutV0ConfigureRegulationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureRegulationsRaw(requestParameters, initOverrides);
  }

  /**
   * Create retention policies for data categories
   */
  async putV0ConfigureRetentionPoliciesRaw(
    requestParameters: PutV0ConfigureRetentionPoliciesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/retention-policies`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createRetentionPolicyPayload.map(
          CreateRetentionPolicyPayloadToJSON
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create retention policies for data categories
   */
  async putV0ConfigureRetentionPolicies(
    requestParameters: PutV0ConfigureRetentionPoliciesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureRetentionPoliciesRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Add selectors
   */
  async putV0ConfigureSelectorsRaw(
    requestParameters: PutV0ConfigureSelectorsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/configure/selectors`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createSelectorPayload.map(
          CreateSelectorPayloadToJSON
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add selectors
   */
  async putV0ConfigureSelectors(
    requestParameters: PutV0ConfigureSelectorsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.putV0ConfigureSelectorsRaw(requestParameters, initOverrides);
  }
}
