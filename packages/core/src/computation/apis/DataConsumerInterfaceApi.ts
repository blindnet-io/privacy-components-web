/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ApproveDemandPayload,
  DenyDemandPayload,
  PendingDemandDetailsPayload,
  PendingDemandPayload,
} from '../models';
import {
  ApproveDemandPayloadFromJSON,
  ApproveDemandPayloadToJSON,
  DenyDemandPayloadFromJSON,
  DenyDemandPayloadToJSON,
  PendingDemandDetailsPayloadFromJSON,
  PendingDemandDetailsPayloadToJSON,
  PendingDemandPayloadFromJSON,
  PendingDemandPayloadToJSON,
} from '../models';

export interface GetV0ConsumerInterfacePendingRequestsDemandidRequest {
  demandId: string;
}

export interface PostV0ConsumerInterfacePendingRequestsApproveRequest {
  approveDemandPayload: ApproveDemandPayload;
}

export interface PostV0ConsumerInterfacePendingRequestsDenyRequest {
  denyDemandPayload: DenyDemandPayload;
}

/**
 *
 */
export class DataConsumerInterfaceApi extends runtime.BaseAPI {
  /**
   * Get the list of pending privacy request demands
   */
  async getV0ConsumerInterfacePendingRequestsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PendingDemandPayload>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/consumer-interface/pending-requests`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(PendingDemandPayloadFromJSON)
    );
  }

  /**
   * Get the list of pending privacy request demands
   */
  async getV0ConsumerInterfacePendingRequests(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PendingDemandPayload>> {
    const response = await this.getV0ConsumerInterfacePendingRequestsRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get details of a pending privacy request
   */
  async getV0ConsumerInterfacePendingRequestsDemandidRaw(
    requestParameters: GetV0ConsumerInterfacePendingRequestsDemandidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PendingDemandDetailsPayload>> {
    if (
      requestParameters.demandId === null ||
      requestParameters.demandId === undefined
    ) {
      throw new runtime.RequiredError(
        'demandId',
        'Required parameter requestParameters.demandId was null or undefined when calling getV0ConsumerInterfacePendingRequestsDemandid.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v0/consumer-interface/pending-requests/{demandId}`.replace(
          `{${'demandId'}}`,
          encodeURIComponent(String(requestParameters.demandId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      PendingDemandDetailsPayloadFromJSON(jsonValue)
    );
  }

  /**
   * Get details of a pending privacy request
   */
  async getV0ConsumerInterfacePendingRequestsDemandid(
    requestParameters: GetV0ConsumerInterfacePendingRequestsDemandidRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PendingDemandDetailsPayload> {
    const response =
      await this.getV0ConsumerInterfacePendingRequestsDemandidRaw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * Approve privacy request
   */
  async postV0ConsumerInterfacePendingRequestsApproveRaw(
    requestParameters: PostV0ConsumerInterfacePendingRequestsApproveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.approveDemandPayload === null ||
      requestParameters.approveDemandPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'approveDemandPayload',
        'Required parameter requestParameters.approveDemandPayload was null or undefined when calling postV0ConsumerInterfacePendingRequestsApprove.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/consumer-interface/pending-requests/approve`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ApproveDemandPayloadToJSON(
          requestParameters.approveDemandPayload
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Approve privacy request
   */
  async postV0ConsumerInterfacePendingRequestsApprove(
    requestParameters: PostV0ConsumerInterfacePendingRequestsApproveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0ConsumerInterfacePendingRequestsApproveRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Deny privacy request
   */
  async postV0ConsumerInterfacePendingRequestsDenyRaw(
    requestParameters: PostV0ConsumerInterfacePendingRequestsDenyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.denyDemandPayload === null ||
      requestParameters.denyDemandPayload === undefined
    ) {
      throw new runtime.RequiredError(
        'denyDemandPayload',
        'Required parameter requestParameters.denyDemandPayload was null or undefined when calling postV0ConsumerInterfacePendingRequestsDeny.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v0/consumer-interface/pending-requests/deny`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DenyDemandPayloadToJSON(requestParameters.denyDemandPayload),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deny privacy request
   */
  async postV0ConsumerInterfacePendingRequestsDeny(
    requestParameters: PostV0ConsumerInterfacePendingRequestsDenyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postV0ConsumerInterfacePendingRequestsDenyRaw(
      requestParameters,
      initOverrides
    );
  }
}
