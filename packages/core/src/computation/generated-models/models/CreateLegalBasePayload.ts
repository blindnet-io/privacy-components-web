/* tslint:disable */
/* eslint-disable */
/**
 * Privacy computation engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScopePayload } from './ScopePayload';
import {
  ScopePayloadFromJSON,
  ScopePayloadFromJSONTyped,
  ScopePayloadToJSON,
} from './ScopePayload';

/**
 *
 * @export
 * @interface CreateLegalBasePayload
 */
export interface CreateLegalBasePayload {
  /**
   * type of the legal base
   * @type {string}
   * @memberof CreateLegalBasePayload
   */
  lb_type: CreateLegalBasePayloadLbTypeEnum;
  /**
   * legal base name
   * @type {string}
   * @memberof CreateLegalBasePayload
   */
  name?: string;
  /**
   * legal base description
   * @type {string}
   * @memberof CreateLegalBasePayload
   */
  description?: string;
  /**
   * privacy scope of the legal base
   * @type {Array<ScopePayload>}
   * @memberof CreateLegalBasePayload
   */
  scope?: Array<ScopePayload>;
}

/**
 * @export
 * @enum {string}
 */
export enum CreateLegalBasePayloadLbTypeEnum {
  Contract = 'CONTRACT',
  Consent = 'CONSENT',
  LegitimateInterest = 'LEGITIMATE-INTEREST',
  Necessary = 'NECESSARY',
  NecessaryLegalObligation = 'NECESSARY.LEGAL-OBLIGATION',
  NecessaryPublicInterest = 'NECESSARY.PUBLIC-INTEREST',
  NecessaryVitalInterest = 'NECESSARY.VITAL-INTEREST',
  OtherLegalBase = 'OTHER-LEGAL-BASE',
}

/**
 * Check if a given object implements the CreateLegalBasePayload interface.
 */
export function instanceOfCreateLegalBasePayload(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'lb_type' in value;

  return isInstance;
}

export function CreateLegalBasePayloadFromJSON(
  json: any
): CreateLegalBasePayload {
  return CreateLegalBasePayloadFromJSONTyped(json, false);
}

export function CreateLegalBasePayloadFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): CreateLegalBasePayload {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    lb_type: json['lb_type'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    scope: !exists(json, 'scope')
      ? undefined
      : (json['scope'] as Array<any>).map(ScopePayloadFromJSON),
  };
}

export function CreateLegalBasePayloadToJSON(
  value?: CreateLegalBasePayload | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    lb_type: value.lb_type,
    name: value.name,
    description: value.description,
    scope:
      value.scope === undefined
        ? undefined
        : (value.scope as Array<any>).map(ScopePayloadToJSON),
  };
}
