{"version":3,"file":"index.all.min.js","sources":["../src/models/generated-models/core/ApiError.ts","../src/models/generated-models/core/CancelablePromise.ts","../src/models/generated-models/core/OpenAPI.ts","../src/models/generated-models/models/CreateLegalBasePayload.ts","../src/models/generated-models/models/CreatePrivacyRequestPayload.ts","../src/models/generated-models/models/CreateProvenancePayload.ts","../src/models/generated-models/models/CreateRetentionPolicyPayload.ts","../src/models/generated-models/models/DemandResolution.ts","../src/models/generated-models/models/DenyDemandPayload.ts","../src/models/generated-models/models/LegalBase.ts","../src/models/generated-models/models/PendingDemandDetailsPayload.ts","../src/models/generated-models/models/PendingDemandPayload.ts","../src/models/generated-models/models/PrItem.ts","../src/models/generated-models/models/PrivacyRequestDemand.ts","../src/models/generated-models/models/PrivacyResponsePayload.ts","../src/models/generated-models/models/PrivacyScopeRestriction.ts","../src/models/generated-models/models/PrivacyScopeTriple.ts","../src/models/generated-models/models/Provenance.ts","../src/models/generated-models/models/ProvenanceRestriction.ts","../src/models/generated-models/models/Recommendation.ts","../src/models/generated-models/models/RetentionPolicy.ts","../src/models/generated-models/models/ScopePayload.ts","../src/models/generated-models/core/request.ts","../src/models/generated-models/services/CallbacksService.ts","../src/models/generated-models/services/ConfigurationService.ts","../src/models/generated-models/services/DataConsumerInterfaceService.ts","../src/models/generated-models/services/HealthService.ts","../src/models/generated-models/services/PrivacyRequestsService.ts","../src/models/generated-models/services/UserEventsService.ts","../src/models/generated-models/services/UserInfoService.ts","../src/computation/computation-api.ts","../src/BlindnetCore.ts","../src/configuration/core-configuration-mixin.ts"],"sourcesContent":["/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions.js';\nimport type { ApiResult } from './ApiResult.js';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(\n    request: ApiRequestOptions,\n    response: ApiResult,\n    message: string\n  ) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  readonly [Symbol.toStringTag]!: string;\n\n  private _isResolved: boolean;\n  private _isRejected: boolean;\n  private _isCancelled: boolean;\n  private readonly _cancelHandlers: (() => void)[];\n  private readonly _promise: Promise<T>;\n  private _resolve?: (value: T | PromiseLike<T>) => void;\n  private _reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this._isResolved = false;\n    this._isRejected = false;\n    this._isCancelled = false;\n    this._cancelHandlers = [];\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isResolved = true;\n        this._resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isRejected = true;\n        this._reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this._isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this._isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this._isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this._promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this._promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this._promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this._isResolved || this._isRejected || this._isCancelled) {\n      return;\n    }\n    this._isCancelled = true;\n    if (this._cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this._cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this._cancelHandlers.length = 0;\n    this._reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this._isCancelled;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions.js';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n  BASE: string;\n  VERSION: string;\n  WITH_CREDENTIALS: boolean;\n  CREDENTIALS: 'include' | 'omit' | 'same-origin';\n  TOKEN?: string | Resolver<string>;\n  USERNAME?: string | Resolver<string>;\n  PASSWORD?: string | Resolver<string>;\n  HEADERS?: Headers | Resolver<Headers>;\n  ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n  BASE: '',\n  VERSION: '0.5.0-SNAPSHOT',\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: 'include',\n  TOKEN: undefined,\n  USERNAME: undefined,\n  PASSWORD: undefined,\n  HEADERS: undefined,\n  ENCODE_PATH: undefined,\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { ScopePayload } from './ScopePayload.js';\n\nexport type CreateLegalBasePayload = {\n  /**\n   * type of the legal base\n   */\n  lb_type: CreateLegalBasePayload.lb_type;\n  /**\n   * legal base name\n   */\n  name?: string;\n  /**\n   * legal base description\n   */\n  description?: string;\n  /**\n   * privacy scope of the legal base\n   */\n  scope?: Array<ScopePayload>;\n};\n\nexport namespace CreateLegalBasePayload {\n  /**\n   * type of the legal base\n   */\n  export enum lb_type {\n    CONTRACT = 'CONTRACT',\n    CONSENT = 'CONSENT',\n    LEGITIMATE_INTEREST = 'LEGITIMATE-INTEREST',\n    NECESSARY = 'NECESSARY',\n    NECESSARY_LEGAL_OBLIGATION = 'NECESSARY.LEGAL-OBLIGATION',\n    NECESSARY_PUBLIC_INTEREST = 'NECESSARY.PUBLIC-INTEREST',\n    NECESSARY_VITAL_INTEREST = 'NECESSARY.VITAL-INTEREST',\n    OTHER_LEGAL_BASE = 'OTHER-LEGAL-BASE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { DataSubjectPayload } from './DataSubjectPayload.js';\nimport type { PrivacyRequestDemand } from './PrivacyRequestDemand.js';\n\nexport type CreatePrivacyRequestPayload = {\n  target?: CreatePrivacyRequestPayload.target;\n  email?: string;\n  demands?: Array<PrivacyRequestDemand>;\n  data_subject?: Array<DataSubjectPayload>;\n};\n\nexport namespace CreatePrivacyRequestPayload {\n  export enum target {\n    _ = '*',\n    ORGANIZATION = 'ORGANIZATION',\n    SYSTEM = 'SYSTEM',\n    PARTNERS = 'PARTNERS',\n    PARTNERS_DOWNWARD = 'PARTNERS.DOWNWARD',\n    PARTNERS_UPWARD = 'PARTNERS.UPWARD',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * origin of the data category\n */\nexport type CreateProvenancePayload = {\n  /**\n   * data category for which the provenance is created\n   */\n  data_category: string;\n  /**\n   * provenance type\n   */\n  provenance: CreateProvenancePayload.provenance;\n  /**\n   * id of the system data category originated from. null for own system\n   */\n  system?: string;\n};\n\nexport namespace CreateProvenancePayload {\n  /**\n   * provenance type\n   */\n  export enum provenance {\n    _ = '*',\n    DERIVED = 'DERIVED',\n    TRANSFERRED = 'TRANSFERRED',\n    USER = 'USER',\n    USER_DATA_SUBJECT = 'USER.DATA-SUBJECT',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * keep CONTACT for no longer than 30 days after a service defined by a legal base ends\n */\nexport type CreateRetentionPolicyPayload = {\n  /**\n   * data category for which the policy is created\n   */\n  data_category: string;\n  /**\n   * retention policy\n   */\n  policy: CreateRetentionPolicyPayload.policy;\n  /**\n   * duration in JSON Schema duration format\n   */\n  duration: string;\n  /**\n   * event type to which the retention duration is relative to\n   */\n  after: CreateRetentionPolicyPayload.after;\n};\n\nexport namespace CreateRetentionPolicyPayload {\n  /**\n   * retention policy\n   */\n  export enum policy {\n    NO_LONGER_THAN = 'NO-LONGER-THAN',\n    NO_LESS_THAN = 'NO-LESS-THAN',\n  }\n\n  /**\n   * event type to which the retention duration is relative to\n   */\n  export enum after {\n    CAPTURE_DATE = 'CAPTURE-DATE',\n    RELATIONSHIP_START = 'RELATIONSHIP-START',\n    RELATIONSHIP_END = 'RELATIONSHIP-END',\n    SERVICE_START = 'SERVICE-START',\n    SERVICE_END = 'SERVICE-END',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport enum DemandResolution {\n  AUTO = 'auto',\n  MANUAL = 'manual',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type DenyDemandPayload = {\n  id: string;\n  motive: DenyDemandPayload.motive;\n  msg?: string;\n  lang?: string;\n};\n\nexport namespace DenyDemandPayload {\n  export enum motive {\n    IDENTITY_UNCONFIRMED = 'IDENTITY-UNCONFIRMED',\n    LANGUAGE_UNSUPPORTED = 'LANGUAGE-UNSUPPORTED',\n    VALID_REASONS = 'VALID-REASONS',\n    IMPOSSIBLE = 'IMPOSSIBLE',\n    NO_SUCH_DATA = 'NO-SUCH-DATA',\n    REQUEST_UNSUPPORTED = 'REQUEST-UNSUPPORTED',\n    USER_UNKNOWN = 'USER-UNKNOWN',\n    OTHER_MOTIVE = 'OTHER-MOTIVE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { PrivacyScope } from './PrivacyScope.js';\n\nexport type LegalBase = {\n  id: string;\n  lb_type: LegalBase.lb_type;\n  scope: PrivacyScope;\n  name?: string;\n  description?: string;\n  active: boolean;\n};\n\nexport namespace LegalBase {\n  export enum lb_type {\n    CONTRACT = 'CONTRACT',\n    CONSENT = 'CONSENT',\n    LEGITIMATE_INTEREST = 'LEGITIMATE-INTEREST',\n    NECESSARY = 'NECESSARY',\n    NECESSARY_LEGAL_OBLIGATION = 'NECESSARY.LEGAL-OBLIGATION',\n    NECESSARY_PUBLIC_INTEREST = 'NECESSARY.PUBLIC-INTEREST',\n    NECESSARY_VITAL_INTEREST = 'NECESSARY.VITAL-INTEREST',\n    OTHER_LEGAL_BASE = 'OTHER-LEGAL-BASE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { DataSubjectPayload } from './DataSubjectPayload.js';\nimport type { Recommendation } from './Recommendation.js';\n\nexport type PendingDemandDetailsPayload = {\n  id: string;\n  date: string;\n  action: PendingDemandDetailsPayload.action;\n  data_subject?: DataSubjectPayload;\n  recommendation?: Recommendation;\n};\n\nexport namespace PendingDemandDetailsPayload {\n  export enum action {\n    ACCESS = 'ACCESS',\n    DELETE = 'DELETE',\n    MODIFY = 'MODIFY',\n    OBJECT = 'OBJECT',\n    PORTABILITY = 'PORTABILITY',\n    RESTRICT = 'RESTRICT',\n    REVOKE_CONSENT = 'REVOKE-CONSENT',\n    TRANSPARENCY = 'TRANSPARENCY',\n    TRANSPARENCY_DATA_CATEGORIES = 'TRANSPARENCY.DATA-CATEGORIES',\n    TRANSPARENCY_DPO = 'TRANSPARENCY.DPO',\n    TRANSPARENCY_KNOWN = 'TRANSPARENCY.KNOWN',\n    TRANSPARENCY_LEGAL_BASES = 'TRANSPARENCY.LEGAL-BASES',\n    TRANSPARENCY_ORGANIZATION = 'TRANSPARENCY.ORGANIZATION',\n    TRANSPARENCY_POLICY = 'TRANSPARENCY.POLICY',\n    TRANSPARENCY_PROCESSING_CATEGORIES = 'TRANSPARENCY.PROCESSING-CATEGORIES',\n    TRANSPARENCY_PROVENANCE = 'TRANSPARENCY.PROVENANCE',\n    TRANSPARENCY_PURPOSE = 'TRANSPARENCY.PURPOSE',\n    TRANSPARENCY_RETENTION = 'TRANSPARENCY.RETENTION',\n    TRANSPARENCY_WHERE = 'TRANSPARENCY.WHERE',\n    TRANSPARENCY_WHO = 'TRANSPARENCY.WHO',\n    OTHER = 'OTHER-DEMAND',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { DataSubjectPayload } from './DataSubjectPayload.js';\n\nexport type PendingDemandPayload = {\n  id: string;\n  date: string;\n  action: PendingDemandPayload.action;\n  data_subject?: DataSubjectPayload;\n};\n\nexport namespace PendingDemandPayload {\n  export enum action {\n    ACCESS = 'ACCESS',\n    DELETE = 'DELETE',\n    MODIFY = 'MODIFY',\n    OBJECT = 'OBJECT',\n    PORTABILITY = 'PORTABILITY',\n    RESTRICT = 'RESTRICT',\n    REVOKE_CONSENT = 'REVOKE-CONSENT',\n    TRANSPARENCY = 'TRANSPARENCY',\n    TRANSPARENCY_DATA_CATEGORIES = 'TRANSPARENCY.DATA-CATEGORIES',\n    TRANSPARENCY_DPO = 'TRANSPARENCY.DPO',\n    TRANSPARENCY_KNOWN = 'TRANSPARENCY.KNOWN',\n    TRANSPARENCY_LEGAL_BASES = 'TRANSPARENCY.LEGAL-BASES',\n    TRANSPARENCY_ORGANIZATION = 'TRANSPARENCY.ORGANIZATION',\n    TRANSPARENCY_POLICY = 'TRANSPARENCY.POLICY',\n    TRANSPARENCY_PROCESSING_CATEGORIES = 'TRANSPARENCY.PROCESSING-CATEGORIES',\n    TRANSPARENCY_PROVENANCE = 'TRANSPARENCY.PROVENANCE',\n    TRANSPARENCY_PURPOSE = 'TRANSPARENCY.PURPOSE',\n    TRANSPARENCY_RETENTION = 'TRANSPARENCY.RETENTION',\n    TRANSPARENCY_WHERE = 'TRANSPARENCY.WHERE',\n    TRANSPARENCY_WHO = 'TRANSPARENCY.WHO',\n    OTHER = 'OTHER-DEMAND',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type PrItem = {\n  id: string;\n  date: string;\n  demands: number;\n  status: PrItem.status;\n};\n\nexport namespace PrItem {\n  export enum status {\n    IN_PROCESSING = 'IN_PROCESSING',\n    PARTIALLY_COMPLETED = 'PARTIALLY_COMPLETED',\n    COMPLETED = 'COMPLETED',\n    CANCELED = 'CANCELED',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nimport type { Restrictions } from './Restrictions.js';\n\nexport type PrivacyRequestDemand = {\n  id: string;\n  action: PrivacyRequestDemand.action;\n  message?: string;\n  language?: string;\n  data?: Array<string>;\n  restrictions?: Restrictions;\n};\n\nexport namespace PrivacyRequestDemand {\n  export enum action {\n    ACCESS = 'ACCESS',\n    DELETE = 'DELETE',\n    MODIFY = 'MODIFY',\n    OBJECT = 'OBJECT',\n    PORTABILITY = 'PORTABILITY',\n    RESTRICT = 'RESTRICT',\n    REVOKE_CONSENT = 'REVOKE-CONSENT',\n    TRANSPARENCY = 'TRANSPARENCY',\n    TRANSPARENCY_DATA_CATEGORIES = 'TRANSPARENCY.DATA-CATEGORIES',\n    TRANSPARENCY_DPO = 'TRANSPARENCY.DPO',\n    TRANSPARENCY_KNOWN = 'TRANSPARENCY.KNOWN',\n    TRANSPARENCY_LEGAL_BASES = 'TRANSPARENCY.LEGAL-BASES',\n    TRANSPARENCY_ORGANIZATION = 'TRANSPARENCY.ORGANIZATION',\n    TRANSPARENCY_POLICY = 'TRANSPARENCY.POLICY',\n    TRANSPARENCY_PROCESSING_CATEGORIES = 'TRANSPARENCY.PROCESSING-CATEGORIES',\n    TRANSPARENCY_PROVENANCE = 'TRANSPARENCY.PROVENANCE',\n    TRANSPARENCY_PURPOSE = 'TRANSPARENCY.PURPOSE',\n    TRANSPARENCY_RETENTION = 'TRANSPARENCY.RETENTION',\n    TRANSPARENCY_WHERE = 'TRANSPARENCY.WHERE',\n    TRANSPARENCY_WHO = 'TRANSPARENCY.WHO',\n    OTHER = 'OTHER-DEMAND',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type PrivacyResponsePayload = {\n  demand_id: string;\n  date: string;\n  requested_action: PrivacyResponsePayload.requested_action;\n  status: PrivacyResponsePayload.status;\n  motive?: PrivacyResponsePayload.motive;\n  answer?: any;\n  message?: string;\n  lang?: string;\n  includes?: Array<any>;\n  data?: string;\n};\n\nexport namespace PrivacyResponsePayload {\n  export enum requested_action {\n    ACCESS = 'ACCESS',\n    DELETE = 'DELETE',\n    MODIFY = 'MODIFY',\n    OBJECT = 'OBJECT',\n    PORTABILITY = 'PORTABILITY',\n    RESTRICT = 'RESTRICT',\n    REVOKE_CONSENT = 'REVOKE-CONSENT',\n    TRANSPARENCY = 'TRANSPARENCY',\n    TRANSPARENCY_DATA_CATEGORIES = 'TRANSPARENCY.DATA-CATEGORIES',\n    TRANSPARENCY_DPO = 'TRANSPARENCY.DPO',\n    TRANSPARENCY_KNOWN = 'TRANSPARENCY.KNOWN',\n    TRANSPARENCY_LEGAL_BASES = 'TRANSPARENCY.LEGAL-BASES',\n    TRANSPARENCY_ORGANIZATION = 'TRANSPARENCY.ORGANIZATION',\n    TRANSPARENCY_POLICY = 'TRANSPARENCY.POLICY',\n    TRANSPARENCY_PROCESSING_CATEGORIES = 'TRANSPARENCY.PROCESSING-CATEGORIES',\n    TRANSPARENCY_PROVENANCE = 'TRANSPARENCY.PROVENANCE',\n    TRANSPARENCY_PURPOSE = 'TRANSPARENCY.PURPOSE',\n    TRANSPARENCY_RETENTION = 'TRANSPARENCY.RETENTION',\n    TRANSPARENCY_WHERE = 'TRANSPARENCY.WHERE',\n    TRANSPARENCY_WHO = 'TRANSPARENCY.WHO',\n    OTHER = 'OTHER-DEMAND',\n  }\n\n  export enum status {\n    GRANTED = 'GRANTED',\n    DENIED = 'DENIED',\n    PARTIALLY_GRANTED = 'PARTIALLY-GRANTED',\n    UNDER_REVIEW = 'UNDER-REVIEW',\n    CANCELED = 'CANCELED',\n  }\n\n  export enum motive {\n    IDENTITY_UNCONFIRMED = 'IDENTITY-UNCONFIRMED',\n    LANGUAGE_UNSUPPORTED = 'LANGUAGE-UNSUPPORTED',\n    VALID_REASONS = 'VALID-REASONS',\n    IMPOSSIBLE = 'IMPOSSIBLE',\n    NO_SUCH_DATA = 'NO-SUCH-DATA',\n    REQUEST_UNSUPPORTED = 'REQUEST-UNSUPPORTED',\n    USER_UNKNOWN = 'USER-UNKNOWN',\n    OTHER_MOTIVE = 'OTHER-MOTIVE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type PrivacyScopeRestriction = {\n  dc: string;\n  pc: PrivacyScopeRestriction.pc;\n  pp: PrivacyScopeRestriction.pp;\n};\n\nexport namespace PrivacyScopeRestriction {\n  export enum pc {\n    _ = '*',\n    ANONYMIZATION = 'ANONYMIZATION',\n    AUTOMATED_INFERENCE = 'AUTOMATED-INFERENCE',\n    AUTOMATED_DECISION_MAKING = 'AUTOMATED-DECISION-MAKING',\n    COLLECTION = 'COLLECTION',\n    GENERATING = 'GENERATING',\n    PUBLISHING = 'PUBLISHING',\n    STORING = 'STORING',\n    SHARING = 'SHARING',\n    USING = 'USING',\n    OTHER_PROCESSING = 'OTHER-PROCESSING',\n  }\n\n  export enum pp {\n    _ = '*',\n    ADVERTISING = 'ADVERTISING',\n    COMPLIANCE = 'COMPLIANCE',\n    EMPLOYMENT = 'EMPLOYMENT',\n    JUSTICE = 'JUSTICE',\n    MARKETING = 'MARKETING',\n    MEDICAL = 'MEDICAL',\n    PERSONALIZATION = 'PERSONALIZATION',\n    PUBLIC_INTERESTS = 'PUBLIC-INTERESTS',\n    RESEARCH = 'RESEARCH',\n    SALE = 'SALE',\n    SECURITY = 'SECURITY',\n    SERVICES = 'SERVICES',\n    SERVICES_ADDITIONAL_SERVICES = 'SERVICES.ADDITIONAL-SERVICES',\n    SERVICES_BASIC_SERVICE = 'SERVICES.BASIC-SERVICE',\n    SOCIAL_PROTECTION = 'SOCIAL-PROTECTION',\n    TRACKING = 'TRACKING',\n    VITAL_INTERESTS = 'VITAL-INTERESTS',\n    OTHER_PURPOSE = 'OTHER-PURPOSE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type PrivacyScopeTriple = {\n  data_category: string;\n  processing_category: PrivacyScopeTriple.processing_category;\n  purpose: PrivacyScopeTriple.purpose;\n};\n\nexport namespace PrivacyScopeTriple {\n  export enum processing_category {\n    _ = '*',\n    ANONYMIZATION = 'ANONYMIZATION',\n    AUTOMATED_INFERENCE = 'AUTOMATED-INFERENCE',\n    AUTOMATED_DECISION_MAKING = 'AUTOMATED-DECISION-MAKING',\n    COLLECTION = 'COLLECTION',\n    GENERATING = 'GENERATING',\n    PUBLISHING = 'PUBLISHING',\n    STORING = 'STORING',\n    SHARING = 'SHARING',\n    USING = 'USING',\n    OTHER_PROCESSING = 'OTHER-PROCESSING',\n  }\n\n  export enum purpose {\n    _ = '*',\n    ADVERTISING = 'ADVERTISING',\n    COMPLIANCE = 'COMPLIANCE',\n    EMPLOYMENT = 'EMPLOYMENT',\n    JUSTICE = 'JUSTICE',\n    MARKETING = 'MARKETING',\n    MEDICAL = 'MEDICAL',\n    PERSONALIZATION = 'PERSONALIZATION',\n    PUBLIC_INTERESTS = 'PUBLIC-INTERESTS',\n    RESEARCH = 'RESEARCH',\n    SALE = 'SALE',\n    SECURITY = 'SECURITY',\n    SERVICES = 'SERVICES',\n    SERVICES_ADDITIONAL_SERVICES = 'SERVICES.ADDITIONAL-SERVICES',\n    SERVICES_BASIC_SERVICE = 'SERVICES.BASIC-SERVICE',\n    SOCIAL_PROTECTION = 'SOCIAL-PROTECTION',\n    TRACKING = 'TRACKING',\n    VITAL_INTERESTS = 'VITAL-INTERESTS',\n    OTHER_PURPOSE = 'OTHER-PURPOSE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type Provenance = {\n  id: string;\n  provenance: Provenance.provenance;\n  system?: string;\n};\n\nexport namespace Provenance {\n  export enum provenance {\n    _ = '*',\n    DERIVED = 'DERIVED',\n    TRANSFERRED = 'TRANSFERRED',\n    USER = 'USER',\n    USER_DATA_SUBJECT = 'USER.DATA-SUBJECT',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type ProvenanceRestriction = {\n  term: ProvenanceRestriction.term;\n  target?: ProvenanceRestriction.target;\n};\n\nexport namespace ProvenanceRestriction {\n  export enum term {\n    _ = '*',\n    DERIVED = 'DERIVED',\n    TRANSFERRED = 'TRANSFERRED',\n    USER = 'USER',\n    USER_DATA_SUBJECT = 'USER.DATA-SUBJECT',\n  }\n\n  export enum target {\n    _ = '*',\n    ORGANIZATION = 'ORGANIZATION',\n    SYSTEM = 'SYSTEM',\n    PARTNERS = 'PARTNERS',\n    PARTNERS_DOWNWARD = 'PARTNERS.DOWNWARD',\n    PARTNERS_UPWARD = 'PARTNERS.UPWARD',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type Recommendation = {\n  id: string;\n  d_id: string;\n  status?: Recommendation.status;\n  motive?: Recommendation.motive;\n  data_categories?: Array<string>;\n  date_from?: string;\n  date_to?: string;\n  provenance?: Recommendation.provenance;\n  target?: Recommendation.target;\n};\n\nexport namespace Recommendation {\n  export enum status {\n    GRANTED = 'GRANTED',\n    DENIED = 'DENIED',\n    PARTIALLY_GRANTED = 'PARTIALLY-GRANTED',\n    UNDER_REVIEW = 'UNDER-REVIEW',\n    CANCELED = 'CANCELED',\n  }\n\n  export enum motive {\n    IDENTITY_UNCONFIRMED = 'IDENTITY-UNCONFIRMED',\n    LANGUAGE_UNSUPPORTED = 'LANGUAGE-UNSUPPORTED',\n    VALID_REASONS = 'VALID-REASONS',\n    IMPOSSIBLE = 'IMPOSSIBLE',\n    NO_SUCH_DATA = 'NO-SUCH-DATA',\n    REQUEST_UNSUPPORTED = 'REQUEST-UNSUPPORTED',\n    USER_UNKNOWN = 'USER-UNKNOWN',\n    OTHER_MOTIVE = 'OTHER-MOTIVE',\n  }\n\n  export enum provenance {\n    _ = '*',\n    DERIVED = 'DERIVED',\n    TRANSFERRED = 'TRANSFERRED',\n    USER = 'USER',\n    USER_DATA_SUBJECT = 'USER.DATA-SUBJECT',\n  }\n\n  export enum target {\n    _ = '*',\n    ORGANIZATION = 'ORGANIZATION',\n    SYSTEM = 'SYSTEM',\n    PARTNERS = 'PARTNERS',\n    PARTNERS_DOWNWARD = 'PARTNERS.DOWNWARD',\n    PARTNERS_UPWARD = 'PARTNERS.UPWARD',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type RetentionPolicy = {\n  id: string;\n  policy_type: RetentionPolicy.policy_type;\n  duration: string;\n  after: RetentionPolicy.after;\n};\n\nexport namespace RetentionPolicy {\n  export enum policy_type {\n    NO_LONGER_THAN = 'NO-LONGER-THAN',\n    NO_LESS_THAN = 'NO-LESS-THAN',\n  }\n\n  export enum after {\n    CAPTURE_DATE = 'CAPTURE-DATE',\n    RELATIONSHIP_START = 'RELATIONSHIP-START',\n    RELATIONSHIP_END = 'RELATIONSHIP-END',\n    SERVICE_START = 'SERVICE-START',\n    SERVICE_END = 'SERVICE-END',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type ScopePayload = {\n  dc: string;\n  pc: ScopePayload.pc;\n  pp: ScopePayload.pp;\n};\n\nexport namespace ScopePayload {\n  export enum pc {\n    _ = '*',\n    ANONYMIZATION = 'ANONYMIZATION',\n    AUTOMATED_INFERENCE = 'AUTOMATED-INFERENCE',\n    AUTOMATED_DECISION_MAKING = 'AUTOMATED-DECISION-MAKING',\n    COLLECTION = 'COLLECTION',\n    GENERATING = 'GENERATING',\n    PUBLISHING = 'PUBLISHING',\n    STORING = 'STORING',\n    SHARING = 'SHARING',\n    USING = 'USING',\n    OTHER_PROCESSING = 'OTHER-PROCESSING',\n  }\n\n  export enum pp {\n    _ = '*',\n    ADVERTISING = 'ADVERTISING',\n    COMPLIANCE = 'COMPLIANCE',\n    EMPLOYMENT = 'EMPLOYMENT',\n    JUSTICE = 'JUSTICE',\n    MARKETING = 'MARKETING',\n    MEDICAL = 'MEDICAL',\n    PERSONALIZATION = 'PERSONALIZATION',\n    PUBLIC_INTERESTS = 'PUBLIC-INTERESTS',\n    RESEARCH = 'RESEARCH',\n    SALE = 'SALE',\n    SECURITY = 'SECURITY',\n    SERVICES = 'SERVICES',\n    SERVICES_ADDITIONAL_SERVICES = 'SERVICES.ADDITIONAL-SERVICES',\n    SERVICES_BASIC_SERVICE = 'SERVICES.BASIC-SERVICE',\n    SOCIAL_PROTECTION = 'SOCIAL-PROTECTION',\n    TRACKING = 'TRACKING',\n    VITAL_INTERESTS = 'VITAL-INTERESTS',\n    OTHER_PURPOSE = 'OTHER-PURPOSE',\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError.js';\nimport type { ApiRequestOptions } from './ApiRequestOptions.js';\nimport type { ApiResult } from './ApiResult.js';\nimport { CancelablePromise } from './CancelablePromise.js';\nimport type { OnCancel } from './CancelablePromise.js';\nimport type { OpenAPIConfig } from './OpenAPI.js';\n\nconst isDefined = <T>(\n  value: T | null | undefined\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n  return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nconst isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nconst base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString('base64');\n  }\n};\n\nconst getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`;\n  }\n\n  return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(\n  options: ApiRequestOptions,\n  resolver?: T | Resolver<T>\n): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nconst getHeaders = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): Promise<Headers> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>\n    );\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers['Authorization'] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream';\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain';\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json';\n    }\n  }\n\n  return new Headers(headers);\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    if (options.mediaType?.includes('/json')) {\n      return JSON.stringify(options.body);\n    } else if (\n      isString(options.body) ||\n      isBlob(options.body) ||\n      isFormData(options.body)\n    ) {\n      return options.body;\n    } else {\n      return JSON.stringify(options.body);\n    }\n  }\n  return undefined;\n};\n\nexport const sendRequest = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Headers,\n  onCancel: OnCancel\n): Promise<Response> => {\n  const controller = new AbortController();\n\n  const request: RequestInit = {\n    headers,\n    body: body ?? formData,\n    method: options.method,\n    signal: controller.signal,\n  };\n\n  if (config.WITH_CREDENTIALS) {\n    request.credentials = config.CREDENTIALS;\n  }\n\n  onCancel(() => controller.abort());\n\n  return await fetch(url, request);\n};\n\nconst getResponseHeader = (\n  response: Response,\n  responseHeader?: string\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers.get(responseHeader);\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nconst getResponseBody = async (response: Response): Promise<any> => {\n  if (response.status !== 204) {\n    try {\n      const contentType = response.headers.get('Content-Type');\n      if (contentType) {\n        const isJSON = contentType.toLowerCase().startsWith('application/json');\n        if (isJSON) {\n          return await response.json();\n        } else {\n          return await response.text();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return undefined;\n};\n\nconst catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult\n): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  };\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error');\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel\n        );\n        const responseBody = await getResponseBody(response);\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader\n        );\n\n        const result: ApiResult = {\n          url,\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { DataCallbackPayload } from '../models/DataCallbackPayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class CallbacksService {\n  /**\n   * Link to access data in the storage created\n   * @param callbackId\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0CallbackCallbackid(\n    callbackId: string,\n    requestBody: DataCallbackPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/callback/{callbackId}',\n      path: {\n        callbackId: callbackId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: path parameter callbackId, Invalid value for: body`,\n      },\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AddRegulationsPayload } from '../models/AddRegulationsPayload.js';\nimport type { CreateLegalBasePayload } from '../models/CreateLegalBasePayload.js';\nimport type { CreateProvenancePayload } from '../models/CreateProvenancePayload.js';\nimport type { CreateRetentionPolicyPayload } from '../models/CreateRetentionPolicyPayload.js';\nimport type { CreateSelectorPayload } from '../models/CreateSelectorPayload.js';\nimport type { DataCategoryResponsePayload } from '../models/DataCategoryResponsePayload.js';\nimport type { DemandResolutionStrategy } from '../models/DemandResolutionStrategy.js';\nimport type { GeneralInformation } from '../models/GeneralInformation.js';\nimport type { LegalBase } from '../models/LegalBase.js';\nimport type { PrivacyScopeDimensionsPayload } from '../models/PrivacyScopeDimensionsPayload.js';\nimport type { RegulationResponsePayload } from '../models/RegulationResponsePayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class ConfigurationService {\n  /**\n   * Get general information about the app\n   * @returns GeneralInformation\n   * @throws ApiError\n   */\n  public static getV0ConfigureGeneralInfo(): CancelablePromise<GeneralInformation> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/general-info',\n    });\n  }\n\n  /**\n   * Update general information about the app\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureGeneralInfo(\n    requestBody: GeneralInformation\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/general-info',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Get data categories, processing categories and purposes\n   * @returns PrivacyScopeDimensionsPayload\n   * @throws ApiError\n   */\n  public static getV0ConfigurePrivacyScopeDimensions(): CancelablePromise<PrivacyScopeDimensionsPayload> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/privacy-scope-dimensions',\n    });\n  }\n\n  /**\n   * Add selectors\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureSelectors(\n    requestBody?: Array<CreateSelectorPayload>\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/selectors',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Get the list of legal bases\n   * @returns LegalBase\n   * @throws ApiError\n   */\n  public static getV0ConfigureLegalBases(): CancelablePromise<\n    Array<LegalBase>\n  > {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/legal-bases',\n    });\n  }\n\n  /**\n   * Create new legal bases\n   * @param requestBody\n   * @returns string\n   * @throws ApiError\n   */\n  public static putV0ConfigureLegalBases(\n    requestBody: CreateLegalBasePayload\n  ): CancelablePromise<string> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/legal-bases',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Get a legal bases\n   * @param legalBaseId\n   * @returns LegalBase\n   * @throws ApiError\n   */\n  public static getV0ConfigureLegalBasesLegalbaseid(\n    legalBaseId: string\n  ): CancelablePromise<LegalBase> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/legal-bases/{legalBaseId}',\n      path: {\n        legalBaseId: legalBaseId,\n      },\n      errors: {\n        400: `Invalid value for: path parameter legalBaseId`,\n      },\n    });\n  }\n\n  /**\n   * Create retention policies for data categories\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureRetentionPolicies(\n    requestBody?: Array<CreateRetentionPolicyPayload>\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/retention-policies',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Delete retention policy\n   * @param retentionPolicyId\n   * @returns any\n   * @throws ApiError\n   */\n  public static deleteV0ConfigureRetentionPoliciesRetentionpolicyid(\n    retentionPolicyId: string\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'DELETE',\n      url: '/v0/configure/retention-policies/{retentionPolicyId}',\n      path: {\n        retentionPolicyId: retentionPolicyId,\n      },\n      errors: {\n        400: `Invalid value for: path parameter retentionPolicyId`,\n      },\n    });\n  }\n\n  /**\n   * Create provenances for data categories\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureProvenances(\n    requestBody?: Array<CreateProvenancePayload>\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/provenances',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Delete provenance\n   * @param provenanceId\n   * @returns any\n   * @throws ApiError\n   */\n  public static deleteV0ConfigureProvenancesProvenanceid(\n    provenanceId: string\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'DELETE',\n      url: '/v0/configure/provenances/{provenanceId}',\n      path: {\n        provenanceId: provenanceId,\n      },\n      errors: {\n        400: `Invalid value for: path parameter provenanceId`,\n      },\n    });\n  }\n\n  /**\n   * Get data categories with retention policies and provenances\n   * @returns DataCategoryResponsePayload\n   * @throws ApiError\n   */\n  public static getV0ConfigureDataCategories(): CancelablePromise<\n    Array<DataCategoryResponsePayload>\n  > {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/data-categories',\n    });\n  }\n\n  /**\n   * Get all regulations\n   * @returns RegulationResponsePayload\n   * @throws ApiError\n   */\n  public static getV0ConfigureRegulations(): CancelablePromise<\n    Array<RegulationResponsePayload>\n  > {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/regulations',\n    });\n  }\n\n  /**\n   * Assign regulation to an app\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureRegulations(\n    requestBody: AddRegulationsPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/regulations',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Get regulations applied to the users of the app\n   * @returns RegulationResponsePayload\n   * @throws ApiError\n   */\n  public static getV0ConfigureRegulationsApp(): CancelablePromise<\n    Array<RegulationResponsePayload>\n  > {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/regulations/app',\n    });\n  }\n\n  /**\n   * Delete regulation assigned to an app\n   * @param regulationId\n   * @returns any\n   * @throws ApiError\n   */\n  public static deleteV0ConfigureRegulationsRegulationid(\n    regulationId: string\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'DELETE',\n      url: '/v0/configure/regulations/{regulationId}',\n      path: {\n        regulationId: regulationId,\n      },\n      errors: {\n        400: `Invalid value for: path parameter regulationId`,\n      },\n    });\n  }\n\n  /**\n   * Get information about demand resolution strategies\n   * @returns DemandResolutionStrategy\n   * @throws ApiError\n   */\n  public static getV0ConfigureDemandResolutionStrategy(): CancelablePromise<DemandResolutionStrategy> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/configure/demand-resolution-strategy',\n    });\n  }\n\n  /**\n   * Update demand resolution strategies\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static putV0ConfigureDemandResolutionStrategy(\n    requestBody: DemandResolutionStrategy\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'PUT',\n      url: '/v0/configure/demand-resolution-strategy',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApproveDemandPayload } from '../models/ApproveDemandPayload.js';\nimport type { DenyDemandPayload } from '../models/DenyDemandPayload.js';\nimport type { PendingDemandDetailsPayload } from '../models/PendingDemandDetailsPayload.js';\nimport type { PendingDemandPayload } from '../models/PendingDemandPayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class DataConsumerInterfaceService {\n  /**\n   * Get the list of pending privacy request demands\n   * @returns PendingDemandPayload\n   * @throws ApiError\n   */\n  public static getV0ConsumerInterfacePendingRequests(): CancelablePromise<\n    Array<PendingDemandPayload>\n  > {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/bridge/pending-requests',\n    });\n  }\n\n  /**\n   * Get details of a pending privacy request\n   * @param demandId\n   * @returns PendingDemandDetailsPayload\n   * @throws ApiError\n   */\n  public static getV0ConsumerInterfacePendingRequestsDemandid(\n    demandId: string\n  ): CancelablePromise<PendingDemandDetailsPayload> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/bridge/pending-requests/{demandId}',\n      path: {\n        demandId: demandId,\n      },\n      errors: {\n        400: `Invalid value for: path parameter demandId`,\n      },\n    });\n  }\n\n  /**\n   * Approve privacy request\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0ConsumerInterfacePendingRequestsApprove(\n    requestBody: ApproveDemandPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/bridge/pending-requests/approve',\n      body: requestBody,\n      mediaType: 'application/json',\n    });\n  }\n\n  /**\n   * Deny privacy request\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0ConsumerInterfacePendingRequestsDeny(\n    requestBody: DenyDemandPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/bridge/pending-requests/deny',\n      body: requestBody,\n      mediaType: 'application/json',\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class HealthService {\n  /**\n   * Is the app running?\n   * @returns any\n   * @throws ApiError\n   */\n  public static getV0Health(): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/health',\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { CancelDemandPayload } from '../models/CancelDemandPayload.js';\nimport type { CreatePrivacyRequestPayload } from '../models/CreatePrivacyRequestPayload.js';\nimport type { PrivacyRequestCreatedPayload } from '../models/PrivacyRequestCreatedPayload.js';\nimport type { PrivacyResponsePayload } from '../models/PrivacyResponsePayload.js';\nimport type { RequestHistoryPayload } from '../models/RequestHistoryPayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class PrivacyRequestsService {\n  /**\n   * Create a privacy request\n   * @param requestBody\n   * @returns PrivacyRequestCreatedPayload\n   * @throws ApiError\n   */\n  public static postV0PrivacyRequest(\n    requestBody: CreatePrivacyRequestPayload\n  ): CancelablePromise<PrivacyRequestCreatedPayload> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/privacy-request',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Get history of privacy requests\n   * @param authorization\n   * @returns RequestHistoryPayload\n   * @throws ApiError\n   */\n  public static getV0PrivacyRequestHistory(\n    authorization: string\n  ): CancelablePromise<RequestHistoryPayload> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/privacy-request/history',\n      headers: {\n        Authorization: authorization,\n      },\n      errors: {\n        400: `Invalid value for: header Authorization`,\n      },\n    });\n  }\n\n  /**\n   * Get privacy request status\n   * @param requestId\n   * @param authorization\n   * @returns PrivacyResponsePayload\n   * @throws ApiError\n   */\n  public static getV0PrivacyRequestRequestid(\n    requestId: string,\n    authorization: string\n  ): CancelablePromise<Array<PrivacyResponsePayload>> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/privacy-request/{requestId}',\n      path: {\n        requestId: requestId,\n      },\n      headers: {\n        Authorization: authorization,\n      },\n      errors: {\n        400: `Invalid value for: path parameter requestId, Invalid value for: header Authorization`,\n      },\n    });\n  }\n\n  /**\n   * Cancel a pending demand\n   * @param authorization\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0PrivacyRequestCancel(\n    authorization: string,\n    requestBody: CancelDemandPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/privacy-request/cancel',\n      headers: {\n        Authorization: authorization,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: header Authorization, Invalid value for: body`,\n      },\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { EndContractPayload } from '../models/EndContractPayload.js';\nimport type { EndLegitimateInterestPayload } from '../models/EndLegitimateInterestPayload.js';\nimport type { GiveConsentPayload } from '../models/GiveConsentPayload.js';\nimport type { StartContractPayload } from '../models/StartContractPayload.js';\nimport type { StartLegitimateInterestPayload } from '../models/StartLegitimateInterestPayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class UserEventsService {\n  /**\n   * Add consent for a user\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0UserEventsConsent(\n    requestBody: GiveConsentPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/user-events/consent',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Start service contract for a user\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0UserEventsContractStart(\n    requestBody: StartContractPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/user-events/contract/start',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * End service contract for a user\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0UserEventsContractEnd(\n    requestBody: EndContractPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/user-events/contract/end',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * Start legitimate interest for a user\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0UserEventsLegitimateInterestStart(\n    requestBody: StartLegitimateInterestPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/user-events/legitimate-interest/start',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n\n  /**\n   * End legitimate interest for a user\n   * @param requestBody\n   * @returns any\n   * @throws ApiError\n   */\n  public static postV0UserEventsLegitimateInterestEnd(\n    requestBody: EndLegitimateInterestPayload\n  ): CancelablePromise<any> {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: '/v0/user-events/legitimate-interest/end',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Invalid value for: body`,\n      },\n    });\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { GivenConsentsPayload } from '../models/GivenConsentsPayload.js';\n\nimport type { CancelablePromise } from '../core/CancelablePromise.js';\nimport { OpenAPI } from '../core/OpenAPI.js';\nimport { request as __request } from '../core/request.js';\n\nexport class UserInfoService {\n  /**\n   * Get a list of consents user has given\n   * @param authorization\n   * @returns GivenConsentsPayload\n   * @throws ApiError\n   */\n  public static getV0UserConsents(\n    authorization: string\n  ): CancelablePromise<Array<GivenConsentsPayload>> {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/v0/user/consents',\n      headers: {\n        Authorization: authorization,\n      },\n      errors: {\n        400: `Invalid value for: header Authorization`,\n      },\n    });\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable camelcase */\nimport {\n  ApproveDemandPayload,\n  CreatePrivacyRequestPayload,\n  DataCategoryResponsePayload,\n  DenyDemandPayload,\n  GivenConsentsPayload,\n  PendingDemandDetailsPayload,\n  PendingDemandPayload,\n  PrivacyResponsePayload,\n  RequestHistoryPayload,\n} from '../models/generated-models/index.js';\n\nexport class ComputationAPI {\n  private static instance: ComputationAPI | null = null;\n\n  static readonly MOCK_URL =\n    'https://stoplight.io/mocks/blindnet/product-management:open-api/74767654';\n\n  static readonly DEFAULT_URL =\n    'https://devkit-pce-staging.azurewebsites.net/v0';\n\n  /**\n   * @param baseURL base URL (schema + host + port + base-path) to call\n   */\n  private constructor(\n    baseURL?: string,\n    apiToken?: string,\n    adminToken?: string\n  ) {\n    if (!baseURL) {\n      this._baseURL = ComputationAPI.DEFAULT_URL;\n    } else if (baseURL === 'false') {\n      this._baseURL = ComputationAPI.MOCK_URL;\n    } else {\n      this._baseURL = baseURL;\n    }\n    // make sure the base URL never has a trailing slash\n    this._baseURL = this._baseURL.replace(/\\/+$/, '');\n\n    if (!apiToken) {\n      this._apiToken = '';\n    } else {\n      this._apiToken = apiToken;\n    }\n\n    if (!adminToken) {\n      // eslint-disable-next-line no-console\n      this._adminToken = '';\n    } else {\n      this._adminToken = adminToken;\n    }\n  }\n\n  get isMocked(): boolean {\n    return this._baseURL === ComputationAPI.MOCK_URL;\n  }\n\n  private fullURL(endpoint: string) {\n    // endpoint should always have one leading slash\n    return `${this._baseURL}${endpoint.replace(/^\\/*/, '/')}`;\n  }\n\n  /**\n   * base URL (schema + host + port + base-path) for all calls\n   */\n  private _baseURL: string;\n\n  get baseURL(): string {\n    return this._baseURL;\n  }\n\n  private _apiToken: string;\n\n  public setToken(apiToken: string) {\n    this._apiToken = apiToken;\n  }\n\n  public apiTokenSet() {\n    return this._apiToken !== '';\n  }\n\n  private _adminToken: string;\n\n  public setAdminToken(adminToken: string) {\n    this._adminToken = adminToken;\n  }\n\n  public adminTokenSet() {\n    return this._adminToken !== '';\n  }\n\n  /**\n   *\n   * @param baseURL base URL (schema + host + port + base-path) to call (for default behavior, see mock)\n   * @param force override any preexisting configuration if it exists\n   *\n   */\n  public static configure(\n    baseURL?: string,\n    apiToken?: string,\n    adminToken?: string,\n    force = false\n  ): boolean {\n    if (ComputationAPI.instance && !force) {\n      if (\n        baseURL !== ComputationAPI.getInstance().baseURL &&\n        baseURL &&\n        baseURL !== 'false'\n      ) {\n        /* eslint-disable no-console */\n        console.log('[Computation API] Configuration conflict');\n        console.log(\n          `[Computation API] configured value: ${\n            ComputationAPI.getInstance().baseURL\n          }`\n        );\n        console.log(`[Computation API] conflicting value: ${baseURL}`);\n        /* eslint-enable no-console */\n      }\n\n      return false;\n    }\n    ComputationAPI.instance = new ComputationAPI(baseURL, apiToken, adminToken);\n    return true;\n  }\n\n  public static getInstance(): ComputationAPI {\n    if (!ComputationAPI.instance) {\n      throw new Error(\n        '[Computation API] trying to use the API before configuring it'\n      );\n    }\n\n    return ComputationAPI.instance;\n  }\n\n  private headers(\n    acceptJSON = false,\n    requireAuth = true,\n    request?: CreatePrivacyRequestPayload\n  ): Headers {\n    const headers = new Headers({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      ...(this.isMocked && request\n        ? { Prefer: this.getMockHeader(request) }\n        : {}),\n      ...(acceptJSON ? { accept: 'application/json' } : {}),\n    });\n\n    // Append auth header if required and api token is defined\n    if (requireAuth && !this._apiToken) {\n      throw new Error('You must include a valid Authorization header!');\n    } else if (this._apiToken) {\n      headers.append('Authorization', `Bearer ${this._apiToken}`);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Determine the correct mock header for a PrivacyRequest\n   * @param request PrivacyRequest to get mock header for\n   * @returns String to be used in the \"prefer\" header\n   */\n  private getMockHeader(request: CreatePrivacyRequestPayload): string {\n    // If more than 1 demand, send the default multi demand response\n    if (request.demands && request.demands.length > 1) {\n      return 'code=200, example=TRANSPARENCY Multi-Response';\n    }\n\n    // Select the mock response corresponding to this action\n    if (request.demands && request.demands.length === 1) {\n      const { action } = request.demands[0];\n      return `code=200, example=${action} Response`;\n    }\n\n    // If no demands get bad request response\n    return 'code=400';\n  }\n\n  // Configuration endpoints\n\n  async getDataCategories(): Promise<DataCategoryResponsePayload[]> {\n    const endpoint = `/configure/data-categories`;\n\n    const response = await fetch(this.fullURL(endpoint), {\n      method: 'GET',\n      headers: this.headers(true),\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  // Privacy Request Endpoints\n\n  // private preProcessRequest(\n  //   request: CreatePrivacyRequestPayload\n  // ): CreatePrivacyRequestPayload {\n  //   // If all privacy scopes provided, this is the same as no restriction\n  //   const allDataCategories = Object.values(DATA_CATEGORY).filter(\n  //     dc => dc !== DATA_CATEGORY.ALL && !dc.includes('.')\n  //   );\n  //   request.demands!.forEach(d => {\n  //     if (d.restrictions && d.restrictions.privacy_scope) {\n  //       const demandDcs = d.restrictions.privacy_scope!.map(psr => psr.dc);\n  //       if (allDataCategories.every(dc => demandDcs.includes(dc))) {\n  //         const demand = d;\n  //         delete demand.restrictions!.privacy_scope;\n  //       }\n  //     }\n  //   });\n\n  //   return request;\n  // }\n\n  /**\n   * Send a PrivacyRequest to the privacy-request API\n   * @param {CreatePrivacyRequestPayload} request Request body to send\n   * @returns\n   */\n  async sendPrivacyRequest(\n    request: CreatePrivacyRequestPayload\n  ): Promise<{ request_id: string }> {\n    const endpoint = `/privacy-request`;\n\n    // const preparedRequest = this.preProcessRequest(request);\n\n    // Only allow no auth header for certain requests\n    const authRequired = request.demands!.every(demand =>\n      demand.action.includes('TRANSPARENCY')\n    );\n\n    const response = await fetch(this.fullURL(endpoint), {\n      method: 'POST',\n      headers: this.headers(true, authRequired, request),\n      body: JSON.stringify(request),\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  async getRequestHistory(): Promise<RequestHistoryPayload> {\n    const endpoint = '/privacy-request/history';\n\n    const response = await fetch(this.fullURL(endpoint), {\n      method: 'GET',\n      headers: this.headers(true),\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  async getRequest(requestId: string): Promise<PrivacyResponsePayload[]> {\n    const endpoint = `/privacy-request/${requestId}`;\n\n    const response = await fetch(this.fullURL(endpoint), {\n      method: 'GET',\n      headers: this.headers(true),\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  async cancelDemand(demand_id: string): Promise<void> {\n    const endpoint = '/privacy-request/cancel';\n\n    const headers = this.headers(true);\n    const body = JSON.stringify({ demand_id });\n\n    const response = await fetch(this.fullURL(endpoint), {\n      method: 'POST',\n      headers,\n      body,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  // Data consumer endpoints\n\n  /**\n   * Gets a list of all demands which are pending a response\n   * @returns {PendingDemandPayload[]}\n   */\n  async getPendingDemands(newAdminToken?: string) {\n    // Update the admin token if one was passed\n    if (typeof newAdminToken !== 'undefined') {\n      this.setAdminToken(newAdminToken);\n    } else if (!this._adminToken) {\n      throw new Error('You must set an admin token before making API calls!');\n    }\n\n    return fetch(\n      `https://devkit-pce-staging.azurewebsites.net/v0/bridge/pending-requests`,\n      {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: `Bearer ${this._adminToken}`,\n        },\n      }\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json() as Promise<PendingDemandPayload[]>;\n    });\n  }\n\n  /**\n   * Get the info and recomendation for a specific demand\n   * @param {string} id uuid of the demand\n   * @returns {PendingDemandDetailsPayload}\n   */\n  async getPendingDemandDetails(id: string, newAdminToken?: string) {\n    // Update the admin token if one was passed\n    if (typeof newAdminToken !== 'undefined') {\n      this.setAdminToken(newAdminToken);\n    } else if (!this._adminToken) {\n      throw new Error('You must set an admin token before making API calls!');\n    }\n\n    return fetch(\n      `https://devkit-pce-staging.azurewebsites.net/v0/bridge/pending-requests/${id}`,\n      {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: `Bearer ${this._adminToken}`,\n        },\n      }\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json() as Promise<PendingDemandDetailsPayload>;\n    });\n  }\n\n  /**\n   * Approve a demand\n   * @param id uuid of the demand to approve\n   * @param msg optional message explaining the approval\n   * @param lang language of the message\n   * @returns\n   */\n  async grantDemand(\n    id: string,\n    msg?: string,\n    lang?: string,\n    newAdminToken?: string\n  ) {\n    // Update the admin token if one was passed\n    if (typeof newAdminToken !== 'undefined') {\n      this.setAdminToken(newAdminToken);\n    } else if (!this._adminToken) {\n      throw new Error('You must set an admin token before making API calls!');\n    }\n\n    if (id === undefined) {\n      throw TypeError('You must pass an ID of the demand to deny.');\n    }\n\n    if (!msg) {\n      msg = undefined;\n    }\n\n    const payload: ApproveDemandPayload = { id, msg, lang };\n\n    return fetch(\n      `https://devkit-pce-staging.azurewebsites.net/v0/bridge/pending-requests/approve`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this._adminToken}`,\n        },\n        body: JSON.stringify(payload),\n      }\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n    });\n  }\n\n  /**\n   * Deny a demand\n   * @param id uuid of the demand to deny\n   * @param msg optional message explaining the denial\n   * @param motive motive for the denial. for the DCI, we are in the situation where demands\n   * are being manually processed, so we assume the motive will be explained in msg and default to\n   * 'OTHER-MOTIVE'.\n   * @param lang language of the message\n   * @returns\n   */\n  async denyDemand(\n    id: string,\n    motive: DenyDemandPayload.motive = DenyDemandPayload.motive.OTHER_MOTIVE,\n    msg?: string,\n    lang?: string,\n    newAdminToken?: string\n  ) {\n    // Update the admin token if one was passed\n    if (typeof newAdminToken !== 'undefined') {\n      this.setAdminToken(newAdminToken);\n    } else if (!this._adminToken) {\n      throw new Error('You must set an admin token before making API calls!');\n    }\n\n    if (id === undefined) {\n      throw TypeError('You must pass an ID of the demand to deny.');\n    }\n\n    const payload: DenyDemandPayload = { id, motive, msg, lang };\n\n    return fetch(\n      `https://devkit-pce-staging.azurewebsites.net/v0/bridge/pending-requests/deny`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this._adminToken}`,\n        },\n        body: JSON.stringify(payload),\n      }\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n    });\n  }\n\n  // User info endpoints\n\n  /**\n   * Get consents given by the user authenticated by the current token\n   */\n  async getUserConsents(): Promise<GivenConsentsPayload[]> {\n    return fetch(\n      `https://devkit-pce-staging.azurewebsites.net/v0/user/consents`,\n      {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: `Bearer ${this._apiToken}`,\n        },\n      }\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json() as Promise<GivenConsentsPayload[]>;\n    });\n  }\n\n  static clean() {\n    ComputationAPI.instance = null;\n  }\n}\n","import { ComputationAPI } from './computation/computation-api.js';\n\nexport interface CoreConfiguration {\n  /**\n   * base URL of the computation API\n   * if \"false\", then a mocked endpoint will be used\n   * if empty, then the blindnet staging endpoint will be used\n   *\n   * @example 'https://localhost:9000/v0\n   */\n  computationBaseUrl?: string;\n\n  /**\n   * Auth token or user ID to use in the authorization header of API requests.\n   * if empty, a default value 'john.doe@example.com' will be used.\n   */\n  apiToken?: string;\n\n  adminToken?: string;\n}\n\n/**\n * Central utilitary class for the @blindnet/core library.\n */\nexport abstract class BlindnetCore {\n  private static _configuration: CoreConfiguration;\n\n  /**\n   * Set-up the global configuration for all privacy components in the document.\n   *\n   * @param force override any preexisting configuration\n   * @returns true if the new configuration has been taken into account\n   */\n  static configure(configuration: CoreConfiguration, force = true): boolean {\n    const isConfigUpdated = BlindnetCore.setUp(configuration, force);\n    if (isConfigUpdated) {\n      BlindnetCore._configuration = configuration;\n    }\n    return isConfigUpdated;\n  }\n\n  static setToken(apiToken: string) {\n    BlindnetCore._configuration.apiToken = apiToken;\n    ComputationAPI.getInstance().setToken(apiToken);\n  }\n\n  static setAdminToken(adminToken: string) {\n    BlindnetCore._configuration.adminToken = adminToken;\n    ComputationAPI.getInstance().setAdminToken(adminToken);\n  }\n\n  /**\n   * Use configuration to correctly set up everything internally.\n   *\n   * @param force override any preexisting configuration\n   */\n  private static setUp(\n    configuration: CoreConfiguration,\n    force: boolean\n  ): boolean {\n    let isConfigUpdated = true;\n    isConfigUpdated =\n      isConfigUpdated &&\n      ComputationAPI.configure(\n        configuration.computationBaseUrl,\n        configuration.apiToken,\n        configuration.adminToken,\n        force\n      );\n    return isConfigUpdated;\n  }\n\n  /**\n   * Get the configuration currently applied to all privacy components in the document.\n   */\n  static get configuration() {\n    return BlindnetCore._configuration;\n  }\n}\n\ndeclare global {\n  // eslint-disable-next-line no-var, vars-on-top\n  var BlindnetCore: BlindnetCore;\n}\n\n// for debugging and more advanced usage\n// eslint-disable-next-line no-undef\n(globalThis || window).BlindnetCore = BlindnetCore;\n","import type { LitElement, PropertyValueMap } from 'lit';\nimport { BlindnetCore } from '../BlindnetCore.js';\n\ndeclare type Constructor<T = {}> = new (...args: any[]) => T;\n\nexport interface CoreConfigurationMixinInterface {\n  computationBaseURL: string;\n  apiToken: string;\n  adminToken: string;\n}\n\n/**\n * Add BlindnetCore configuration parameters to a component as properties\n *\n * All PC4W in the same document needs to use the same configuration.\n * Favor using BlindnetCore.configure when using more than one PC4W in the same document.\n */\nexport function CoreConfigurationMixin<\n  SuperClass extends Constructor<LitElement>\n>(\n  superClass: SuperClass\n): SuperClass & Constructor<CoreConfigurationMixinInterface> {\n  return class CoreConfiguratorElement extends superClass {\n    static get properties() {\n      // @ts-ignore\n      const superProps = super.properties || {};\n      return {\n        ...superProps,\n        computationBaseURL: { type: String, attribute: 'computation-base-url' },\n        apiToken: { type: String, attribute: 'api-token', reflect: true },\n        adminToken: { type: String, attribute: 'admin-token', reflect: true },\n      };\n    }\n\n    /**\n     * base URL of the computation API\n     * if \"false\", then a mocked endpoint will be used\n     * if empty, then the blindnet staging endpoint will be used\n     *\n     * @example 'https://localhost:9000/v0\n     */\n    computationBaseURL = '';\n\n    /**\n     * Auth token or user ID to use in the authorization header of API requests.\n     * if empty, no authorization header will be passed.\n     */\n    apiToken = '';\n\n    adminToken = '';\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      BlindnetCore.configure(\n        {\n          computationBaseUrl: this.computationBaseURL,\n          apiToken: this.apiToken,\n          adminToken: this.adminToken,\n        },\n        false\n      );\n    }\n\n    protected willUpdate(\n      _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n    ): void {\n      if (_changedProperties.has('apiToken') && this.apiToken) {\n        BlindnetCore.setToken(this.apiToken);\n        this.dispatchEvent(\n          new CustomEvent('bldn-core:user-token-set', {\n            composed: true,\n            bubbles: true,\n          })\n        );\n      }\n      if (_changedProperties.has('adminToken') && this.adminToken) {\n        BlindnetCore.setAdminToken(this.adminToken);\n      }\n    }\n  };\n}\n"],"names":["ApiError","Error","constructor","request","response","message","super","this","name","url","status","statusText","body","CancelError","isCancelled","CancelablePromise","executor","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","Promise","resolve","reject","_resolve","_reject","onCancel","cancelHandler","push","Object","defineProperty","get","value","_a","call","reason","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","length","error","console","warn","OpenAPI","BASE","VERSION","WITH_CREDENTIALS","CREDENTIALS","TOKEN","undefined","USERNAME","PASSWORD","HEADERS","ENCODE_PATH","CreateLegalBasePayload","CreatePrivacyRequestPayload","CreateProvenancePayload","CreateRetentionPolicyPayload","DemandResolution","DenyDemandPayload","LegalBase","PendingDemandDetailsPayload","PendingDemandPayload","PrItem","PrivacyRequestDemand","PrivacyResponsePayload","PrivacyScopeRestriction","PrivacyScopeTriple","Provenance","ProvenanceRestriction","Recommendation","RetentionPolicy","ScopePayload","lb_type","target","provenance","policy","after","motive","action","requested_action","pc","pp","processing_category","purpose","term","policy_type","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","test","Symbol","toStringTag","isFormData","FormData","getQueryString","params","qs","process","key","Array","isArray","forEach","v","entries","k","encodeURIComponent","String","append","join","async","options","resolver","getHeaders","config","token","username","password","additionalHeaders","headers","Accept","filter","_","reduce","credentials","str","btoa","err","Buffer","from","toString","base64","mediaType","Headers","encoder","encodeURI","path","replace","substring","group","hasOwnProperty","query","getUrl","formData","JSON","stringify","getFormData","includes","getRequestBody","controller","AbortController","method","signal","abort","fetch","sendRequest","responseBody","contentType","toLowerCase","startsWith","json","text","getResponseBody","responseHeader","content","getResponseHeader","result","ok","errors","catchErrorCodes","CallbacksService","static","callbackId","requestBody","__request","ConfigurationService","legalBaseId","retentionPolicyId","provenanceId","regulationId","DataConsumerInterfaceService","demandId","HealthService","PrivacyRequestsService","authorization","Authorization","requestId","UserEventsService","UserInfoService","ComputationAPI","baseURL","apiToken","adminToken","_baseURL","MOCK_URL","DEFAULT_URL","_apiToken","_adminToken","isMocked","fullURL","endpoint","setToken","apiTokenSet","setAdminToken","adminTokenSet","force","instance","getInstance","log","acceptJSON","requireAuth","Prefer","getMockHeader","accept","demands","authRequired","every","demand","demand_id","newAdminToken","id","msg","lang","TypeError","payload","OTHER_MOTIVE","BlindnetCore","configuration","isConfigUpdated","setUp","_configuration","configure","computationBaseUrl","CoreConfigurationMixin","superClass","computationBaseURL","properties","attribute","reflect","connectedCallback","willUpdate","_changedProperties","has","dispatchEvent","CustomEvent","composed","bubbles","globalThis","window"],"mappings":"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"}