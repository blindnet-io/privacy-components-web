{"version":3,"file":"TransparencyForm.js","sources":["../../src/demand-forms/TransparencyForm.ts"],"sourcesContent":["import { msg } from '@lit/localize';\nimport { css, html, TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { Demand, ACTION, PROVENANCE, Restrictions } from '@blindnet/core';\nimport { enabledActions } from '../utils/conf.js';\nimport {\n  ACTION_DESCRIPTIONS,\n  PROVENANCE_DESCRIPTIONS,\n} from '../utils/dictionary.js';\nimport { MultiDemandForm } from './MultiDemandForm.js';\nimport { FormComponentState } from '../utils/states.js';\n\nimport '../AllChecklist.js';\nimport { PRCIStyles } from '../styles.js';\n\n/**\n * MultiDemandForm for the Transparency PRIV action. Includes a dropdown and text element.\n *\n * The transparency form follows a different pattern than the other actions, as each\n * TRANSPARENCY.* actually represents a completely separate demand, but we display them\n * all in one form.\n */\n@customElement('transparency-form')\nexport class TransparencyForm extends MultiDemandForm {\n  static styles = [\n    MultiDemandForm.styles,\n    PRCIStyles,\n    css`\n      :host {\n        display: grid;\n        row-gap: 35px;\n        align-content: flex-start;\n        margin: 0px;\n      }\n\n      .transparency-options {\n        padding: 40px 40px 20px 40px;\n      }\n\n      #dmd-ctr {\n        display: grid;\n        row-gap: 20px;\n      }\n\n      #dmd-ctr ul {\n        margin: 0;\n      }\n\n      #dmd-ctr li:not(:last-child) {\n        margin-bottom: 15px;\n      }\n\n      #edit-heading-1 {\n        font-weight: bold;\n        grid-column: 1/2;\n        padding: 0px;\n      }\n\n      p {\n        margin: 0px;\n      }\n\n      .additional-msg-ctr {\n        display: grid;\n        row-gap: 20px;\n        margin: 0px 0px 25px 0px;\n      }\n    `,\n  ];\n\n  @property({ type: Array, attribute: false })\n  transparencyActions: ACTION[] = Object.values(ACTION).filter(a =>\n    a.includes('TRANSPARENCY.')\n  );\n\n  @property({ type: Array }) advancedSettings = [];\n\n  @property({ attribute: false }) restrictions: Restrictions = {};\n\n  @state() _additionalMessage = '';\n\n  constructor() {\n    super();\n\n    // Transparency action listeners\n    this.addEventListener('transparency-action-select', e => {\n      const details = (e as CustomEvent).detail;\n      const demand: Demand = {\n        action: details.id,\n        message: this._additionalMessage,\n        restrictions: this.restrictions,\n      };\n      this.setDemand(demand);\n    });\n    this.addEventListener('transparency-action-deselect', e => {\n      const { id } = (e as CustomEvent).detail;\n      this.deleteDemand(id);\n    });\n  }\n\n  handleProvenanceTermClick(e: Event) {\n    const { id } = (e as CustomEvent).target as HTMLInputElement;\n    this.restrictions.provenance = { term: id as PROVENANCE };\n    this.demands.forEach(d => {\n      const demand = d;\n      demand.restrictions!.provenance!.term = id as PROVENANCE;\n    });\n  }\n\n  handleAdditionalMessageInput(e: Event) {\n    this._additionalMessage = (e.target as HTMLTextAreaElement).value;\n    this.demands.forEach(d => {\n      const demand = d;\n      demand.message = this._additionalMessage;\n    });\n  }\n\n  // TODO: Make the transparency form follow our new template\n  buildDemands(): Demand[] {\n    return this.demands;\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  getFormTemplate(): TemplateResult<1 | 2> {\n    const selectedActions = Object.values(this.demands).map(d => d.action);\n    return html`\n      <p id=\"edit-heading-1\">\n        <b>${msg('Details of my TRANSPARENCY Demand')}</b>\n      </p>\n\n      <div class=\"border--light border--rounded transparency-options\">\n        <span slot=\"prompt\"><b>${msg('I want to know:')}</b></span>\n        <all-checklist\n          .choices=${this.transparencyActions.map(a => ({\n            id: a,\n            description: ACTION_DESCRIPTIONS[a](),\n            checked: selectedActions.includes(a),\n            disabled: !enabledActions.get(a) ?? true,\n          }))}\n          all-message=${msg(\n            'ALL information related to data processing practices and know if the organization has data on me'\n          )}\n          component-mode=${FormComponentState.CLOSED}\n          event-prefix=\"transparency-action\"\n          include-buttons\n        ></all-checklist>\n      </div>\n\n      <slotted-dropdown header=${msg('Advanced settings')} include-buttons>\n        <div>\n          <span>\n            ${msg('My demand applies to data from the following provenance:')}\n          </span>\n          <fieldset class=\"provenance-restriction\">\n            ${Object.values(PROVENANCE).map(\n              p => html`\n                <input\n                  id=${p}\n                  name='provenance-term'\n                  type='radio'\n                  ?checked=${\n                    this.demands[0].restrictions?.provenance?.term === p\n                  }\n                  @click=${this.handleProvenanceTermClick}>\n                </input>\n                <label for=${p}>${PROVENANCE_DESCRIPTIONS[p]()}</label><br/>\n              `\n            )}\n          </fieldset>\n        </div>\n      </slotted-dropdown>\n      <slotted-dropdown\n        header=${msg('Additional message (optional)')}\n        include-buttons\n      >\n        <div class=\"additional-msg-ctr\">\n          <span class=\"\">${msg('My additional message:')}</span>\n          <span\n            ><i\n              >${msg(\n                'Please note that adding a personalized message might lead to the demand taking longer to be processed'\n              )}</i\n            ></span\n          >\n          <textarea\n            id=\"additional-msg\"\n            class=\"std-txt-area\"\n            name=\"paragraph_text\"\n            cols=\"50\"\n            rows=\"10\"\n            @input=${this.handleAdditionalMessageInput}\n            .value=${this.demands.length !== 0\n              ? this.demands[0].message ?? ''\n              : ''}\n          ></textarea>\n        </div>\n      </slotted-dropdown>\n    `;\n  }\n}\n"],"names":[],"mappings":"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"}