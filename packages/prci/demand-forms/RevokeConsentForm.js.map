{"version":3,"file":"RevokeConsentForm.js","sources":["../../src/demand-forms/RevokeConsentForm.ts"],"sourcesContent":["import { msg } from '@lit/localize';\nimport { css, html, PropertyValueMap, TemplateResult } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { Demand, ACTION } from '@blindnet/core';\n\nimport { MultiDemandForm } from './MultiDemandForm.js';\nimport '../AllChecklist.js';\nimport { PRCIStyles } from '../styles.js';\n\n/**\n * ActionForm for the REVOKE PRIV action.\n */\n@customElement('revoke-consent-form')\nexport class RevokeConsentForm extends MultiDemandForm {\n  static styles = [\n    MultiDemandForm.styles,\n    PRCIStyles,\n    css`\n      #revoke-consent-form-ctr {\n        display: grid;\n        row-gap: 40px;\n      }\n\n      #revoke-type-btns {\n        border: none;\n        padding: 0px;\n        margin: 0px;\n      }\n\n      #revoke-type-btns input[type='radio'] {\n        -ms-transform: scale(1.5); /* IE 9 */\n        -webkit-transform: scale(1.5); /* Chrome, Safari, Opera */\n        transform: scale(1.5);\n        margin: 3px 10px 0px 5px;\n      }\n\n      #revoke-type-btns input:not(:nth-last-child(2)) {\n        margin-bottom: 25px;\n      }\n\n      #consents-ctr {\n        padding: 40px;\n      }\n\n      #consents-ctr ul {\n        list-style-type: none;\n        margin-bottom: 0px;\n      }\n\n      #consents-ctr ul li input {\n        margin: 3px 10px 3px 4px;\n      }\n\n      .revoke-options {\n        padding: 40px 40px 20px 40px;\n      }\n\n      .additional-msg-ctr {\n        display: grid;\n        row-gap: 20px;\n      }\n    `,\n  ];\n\n  // @state() _selectedConsentIds: Set<Restrictions> = new Set<Restrictions>();\n\n  @state() _additionalMessage = '';\n\n  @state() _revokeAll: boolean = true;\n\n  @state() _allConsentIds: string[] = [];\n\n  @state() _selectedConsentIds: Set<string> = new Set<string>();\n\n  constructor() {\n    super();\n    // FIXME: For now, we hardcode the demo consent ID here. Once we have an endpoint for\n    // it we should fetch all IDs for the current user here instead.\n    this._allConsentIds = ['28b5bee0-9db8-40ec-840e-64eafbfb9ddd'];\n  }\n\n  handleAdditionalMessageInput(e: Event) {\n    this._additionalMessage = (e.target as HTMLTextAreaElement).value;\n    this.demands.forEach(d => {\n      const demand = d;\n      demand.message = this._additionalMessage;\n    });\n  }\n\n  handleRevokeAllClick() {\n    this._revokeAll = true;\n    // Add a consent restriction for all IDs\n    this._selectedConsentIds = new Set<string>(this._allConsentIds);\n  }\n\n  handleRevokeSomeClick() {\n    this._revokeAll = false;\n    // Set to no restrictions, user selects the consents they want to revoke\n    this._selectedConsentIds.clear();\n  }\n\n  /**\n   * Add or remove a consent restriction for the clicked consent\n   * @param e Click event\n   */\n  handleConsentClick(e: Event) {\n    const { id, checked } = e.target as HTMLInputElement;\n    if (id && checked) {\n      this._selectedConsentIds.add(id);\n    } else if (id) {\n      this._selectedConsentIds.delete(id);\n    }\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  /**\n   * Create a list of REVOKE demands, one per each consent restriction\n   * @returns List of Demand objects\n   */\n  buildDemands(): Demand[] {\n    return Array.from(this._selectedConsentIds).map(\n      (id): Demand => ({\n        action: ACTION.REVOKE,\n        restrictions: { consent: { id } },\n      })\n    );\n  }\n\n  /**\n   * FIXME: Once we fetch restrictions, only do this once they have loaded\n   * @param _changedProperties\n   */\n  protected willUpdate(\n    _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n  ): void {\n    if (_changedProperties.has('demands')) {\n      // Reset restrictions and get new ones from demands\n      this._selectedConsentIds.clear();\n      this.demands.forEach(d => {\n        if (d.restrictions && d.restrictions.consent) {\n          this._selectedConsentIds.add(d.restrictions.consent.id);\n        }\n      });\n\n      // If we got consent restriction(s) from demands, select only those\n      if (this._selectedConsentIds.size > 0) {\n        // Set revokeAll if every possible consent is included in the restrictions passed in\n        this._revokeAll = this._allConsentIds.every(id =>\n          this._selectedConsentIds.has(id)\n        );\n      } else {\n        // Default to revoke all if no consent restrictions passed in\n        this._revokeAll = true;\n        this._selectedConsentIds = new Set<string>(this._allConsentIds);\n      }\n    }\n  }\n\n  getFormTemplate(): TemplateResult<1 | 2> {\n    return html`\n      <div id=\"revoke-consent-form-ctr\">\n        <h2>${msg('Details of my REVOKE CONSENT Demand')}</h2>\n\n        ${when(\n          this._allConsentIds.length > 0,\n          () => html`\n            <fieldset id=\"revoke-type-btns\">\n              <input\n                id=\"revoke-all-radio\"\n                name=\"revoke-type\"\n                type=\"radio\"\n                ?checked=${this._revokeAll}\n                @click=${this.handleRevokeAllClick}\n              />\n              <label for=\"revoke-all-radio\"\n                >${msg(html`Revoke <strong>all</strong> consents`)}</label\n              ><br />\n              <input\n                id=\"revoke-some-radio\"\n                name=\"revoke-type\"\n                type=\"radio\"\n                ?checked=${!this._revokeAll}\n                @click=${this.handleRevokeSomeClick}\n              />\n              <label for=\"revoke-some-radio\"\n                >${msg(html`Revoke <strong>some</strong> consents`)}</label\n              >\n            </fieldset>\n\n            ${when(\n              !this._revokeAll,\n              () => html`\n                <div id=\"consents-ctr\" class=\"border--light border--rounded\">\n                  <h3>\n                    ${msg(\n                      html`Check the consents you wish to\n                        <strong>revoke</strong>:`\n                    )}\n                  </h3>\n                  <ul>\n                    ${map(\n                      this._allConsentIds,\n                      id => html`\n                  <li><input id=${id} type='checkbox' @click=${\n                        this.handleConsentClick\n                      } ?checked=${this._selectedConsentIds.has(\n                        id\n                      )}><label for=${id}><strong>I no longer consent to</strong> the storage and processing of my data for the purposes of the prize draw.</label></input></li>\n                `\n                    )}\n                  </ul>\n                </div>\n              `\n            )}\n\n            <slotted-dropdown\n              header=${msg('Additional message (optional)')}\n              include-buttons\n            >\n              <div class=\"additional-msg-ctr\">\n                <span class=\"\">${msg('My additional message:')}</span>\n                <span\n                  ><i\n                    >${msg(\n                      'Please note that adding a personalized message might lead to the demand taking longer to be processed'\n                    )}</i\n                  ></span\n                >\n                <textarea\n                  id=\"additional-msg\"\n                  class=\"std-txt-area\"\n                  name=\"paragraph_text\"\n                  cols=\"50\"\n                  rows=\"10\"\n                  @input=${this.handleAdditionalMessageInput}\n                  .value=${this._additionalMessage}\n                ></textarea>\n              </div>\n            </slotted-dropdown>\n          `\n        )}\n      </div>\n    `;\n  }\n}\n"],"names":[],"mappings":"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"}