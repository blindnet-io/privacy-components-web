import{s as t,i as e,y as i}from"./67d21acf.js";import{F as n}from"./ec7984df.js";import{n as s}from"./44912706.js";class r extends t{static get properties(){return{pristine:{type:Boolean,state:!0},consentGiven:{type:Boolean,state:!0},requireConsent:{type:Boolean,state:!0},_files:{type:Array,state:!0}}}get _form(){return this.renderRoot?.querySelector("#form-participate")??null}get _btnSubmit(){return this.renderRoot?.querySelector("#btn-submit")??null}get _btnReset(){return this.renderRoot?.querySelector("#btn-reset")??null}get _inputFirstName(){return this.renderRoot?.querySelector("#input-firstname")??null}get _inputLastName(){return this.renderRoot?.querySelector("#input-lastname")??null}get _inputEmail(){return this.renderRoot?.querySelector("#input-email")??null}get _inputFileUpload(){return this.renderRoot?.querySelector("#input-file-upload")??null}get _checkboxConsent(){return this.renderRoot?.querySelector("#consent-checkbox")}get _notificationError(){return this.renderRoot?.querySelector("#notification-error")??null}get _notificationSuccess(){return this.renderRoot?.querySelector("#notification-success")??null}constructor(){super(),this.pristine=!0,this.consentGiven=!1,this.requireConsent=!1,this._files=[]}firstUpdated(){this._notificationError.open=!1,this._notificationSuccess.open=!1}static get styles(){return e`:host{display:block;padding:50px 100px;background:#fff;box-shadow:0 4px 12px rgba(0,0,0,.34),0 .500862px 1.50259px rgba(0,0,0,.17);border-radius:20px;text-align:center}@media (min-width:1250px){:host{width:950px}}h1{margin-top:0}form{display:inline-block;margin-left:auto;margin-right:auto;padding:2rem}bx-btn+bx-btn{margin:0 1rem}bx-form-item,bx-inline-notification{margin-bottom:2rem;align-items:center}.btn-container{display:flex;align-items:center}`}async saveDataToServer(t){0!==this._files.length&&(t.set("proof",this._files[0].file),await fetch("https://blindnet-connector-demo-staging.azurewebsites.net/form",{method:"POST",body:t}),this._notificationSuccess.open=!0)}async giveConsent(t){await fetch("https://stage.computing.blindnet.io/v0/user-events/consent/public",{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify({consentId:"28b5bee0-9db8-40ec-840e-64eafbfb9ddd",app_id:"6f083c15-4ada-4671-a6d1-c671bc9105dc",data_subject:{id:t,schema:"email"}})})}setPristine(t){this.pristine=t,this._btnReset.disabled=Boolean(this.pristine)}setSubmitting(t){if(!(this._inputFirstName&&this._inputLastName&&this._inputEmail&&this._inputFileUpload))throw new Error("web component incorrectly initialized");this._inputFirstName.disabled=t,this._inputLastName.disabled=t,this._inputEmail.disabled=t,this._inputFileUpload.disabled=t,this._btnSubmit.disabled=t,this._btnReset.disabled=t||this.pristine}setValidity(t={}){this._notificationError.open="email"in t||"password"in t,this._inputFirstName.invalid="firstname"in t,this._inputLastName.validityMessage=t.username,this._inputEmail.invalid="email"in t}async submit(){if(!this._form)throw new Error("web component incorrectly initialized");const t=new FormData(this._form);try{if(this.consentGiven){this.requireConsent=!1,await this.saveDataToServer(t);const e=t.get("email")?.toString()||"john.doe@example.com";await this.giveConsent(e),this.setSubmitting(!0),this.setValidity()}else this._notificationError.open=!0,this.requireConsent=!0}catch({errors:t}){this.setValidity(t)}finally{this.setSubmitting(!1)}}reset(){[this._notificationError.open,this._notificationSuccess.open].forEach((t=>{t.open=!1})),[this._inputFirstName,this._inputLastName,this._inputEmail].forEach((t=>{t.invalid=!1,t.value=""})),this.setPristine(!0)}handleUpload(t){const{addedFiles:e}=t.detail,i=e.map((t=>({id:Math.random().toString(36).slice(2),file:t})));this._files=i}async getBlindnetToken(t){return fetch("https://blindnet-connector-demo-staging.azurewebsites.net/auth/token",{method:"GET",headers:{Authorization:`Bearer ${t}`}})}render(){return i` <h1>Take part in our prize draw!</h1> <form id="form-participate"> <bx-inline-notification id="notification-error" kind="error" hide-close-button title="Submition failed" subtitle="Please correct below errors."></bx-inline-notification> <bx-inline-notification id="notification-success" kind="success" title="Participation recorded!"></bx-inline-notification> <bx-form-item> <bx-input id="input-firstname" name="first" @input="${()=>{this.setPristine(!1)}}"> <span slot="label-text">First Name</span> <span slot="validity-message">Something isn't right</span> </bx-input> <bx-input id="input-lastname" name="last" @input="${()=>{this.setPristine(!1)}}"> <span slot="label-text">Last Name</span> <span slot="validity-message">Something isn't right</span> </bx-input> </bx-form-item> <bx-form-item> <bx-input type="email" id="input-email" name="email" @input="${()=>{this.setPristine(!1)}}"> <span slot="label-text">Email</span> <span slot="validity-message">Something isn't right</span> </bx-input> </bx-form-item> <bx-form-item> <bx-file-uploader helper-text="Only .jpg, .png or .pdf files." label-text="Proof of purchase" id="input-file-upload" @input="${()=>{this.setPristine(!1)}}"> <bx-file-drop-container name="proof" @bx-file-drop-container-changed="${this.handleUpload}"> Drag and drop a file here or click to upload </bx-file-drop-container> ${this._files.map((({id:t,file:e})=>i` <bx-file-uploader-item data-file-id="${t}" state="${n.UPLOADED}"> ${e.name} <span slot="validity-message-supplement"></span> </bx-file-uploader-item> `))} </bx-file-uploader> </bx-form-item> <bx-form-item> <bx-checkbox id="consent-checkbox" @bx-checkbox-changed="${()=>{this.consentGiven=!this.consentGiven}}" label-text="I consent to the storage and processing of my data for the purposes of this draw"></bx-checkbox> ${s(this.requireConsent,(()=>i` <bx-tag type="red">Consent is required to submit the form</bx-tag> `))} </bx-form-item> <div className="btn-container"> <bx-btn id="btn-submit" @click="${this.submit}">Submit</bx-btn> <bx-btn id="btn-reset" kind="secondary" @click="${this.reset}">Clear Values</bx-btn> </div> </form> `}}customElements.define("addons-demo-form",r);export{r as AppParticipateForm};
